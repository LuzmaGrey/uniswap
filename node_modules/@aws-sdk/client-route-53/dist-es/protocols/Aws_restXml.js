import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, map as __map, parseBoolean as __parseBoolean, parseRfc3339DateTime as __parseRfc3339DateTime, resolvedPath as __resolvedPath, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, throwDefaultError, } from "@aws-sdk/smithy-client";
import { XmlNode as __XmlNode } from "@aws-sdk/xml-builder";
import { decodeHTML } from "entities";
import { parse as xmlParse } from "fast-xml-parser";
import { CidrBlockInUseException, CidrCollectionAlreadyExistsException, CidrCollectionInUseException, CidrCollectionVersionMismatchException, ConcurrentModification, ConflictingDomainExists, ConflictingTypes, DelegationSetAlreadyCreated, DelegationSetAlreadyReusable, DelegationSetInUse, DelegationSetNotAvailable, DelegationSetNotReusable, DNSSECNotFound, HealthCheckAlreadyExists, HealthCheckInUse, HealthCheckVersionMismatch, HostedZoneAlreadyExists, HostedZoneNotEmpty, HostedZoneNotFound, HostedZoneNotPrivate, HostedZonePartiallyDelegated, IncompatibleVersion, InsufficientCloudWatchLogsResourcePolicy, InvalidArgument, InvalidChangeBatch, InvalidDomainName, InvalidInput, InvalidKeySigningKeyName, InvalidKeySigningKeyStatus, InvalidKMSArn, InvalidPaginationToken, InvalidSigningStatus, InvalidTrafficPolicyDocument, InvalidVPCId, KeySigningKeyAlreadyExists, KeySigningKeyInParentDSRecord, KeySigningKeyInUse, KeySigningKeyWithActiveStatusNotFound, LastVPCAssociation, LimitsExceeded, NoSuchChange, NoSuchCidrCollectionException, NoSuchCidrLocationException, NoSuchCloudWatchLogsLogGroup, NoSuchDelegationSet, NoSuchGeoLocation, NoSuchHealthCheck, NoSuchHostedZone, NoSuchKeySigningKey, NoSuchQueryLoggingConfig, NoSuchTrafficPolicy, NoSuchTrafficPolicyInstance, NotAuthorizedException, PriorRequestNotComplete, PublicZoneVPCAssociation, QueryLoggingConfigAlreadyExists, ThrottlingException, TooManyHealthChecks, TooManyHostedZones, TooManyKeySigningKeys, TooManyTrafficPolicies, TooManyTrafficPolicyInstances, TooManyTrafficPolicyVersionsForCurrentPolicy, TooManyVPCAssociationAuthorizations, TrafficPolicyAlreadyExists, TrafficPolicyInstanceAlreadyExists, TrafficPolicyInUse, VPCAssociationAuthorizationNotFound, VPCAssociationNotFound, } from "../models/models_0";
import { Route53ServiceException as __BaseException } from "../models/Route53ServiceException";
export var serializeAws_restXmlActivateKeySigningKeyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Name", function () { return input.Name; }, "{Name}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlAssociateVPCWithHostedZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/associatevpc";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("AssociateVPCWithHostedZoneRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Comment !== undefined) {
                    node = __XmlNode.of("AssociateVPCComment", input.Comment).withName("Comment");
                    bodyNode.addChildNode(node);
                }
                if (input.VPC !== undefined) {
                    node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlChangeCidrCollectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, nodes, containerNode_1, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/cidrcollection/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("ChangeCidrCollectionRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Changes !== undefined) {
                    nodes = serializeAws_restXmlCidrCollectionChanges(input.Changes, context);
                    containerNode_1 = new __XmlNode("Changes");
                    nodes.map(function (node) {
                        containerNode_1.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_1);
                }
                if (input.CollectionVersion !== undefined) {
                    node = __XmlNode.of("CollectionVersion", String(input.CollectionVersion)).withName("CollectionVersion");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlChangeResourceRecordSetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/rrset";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("ChangeResourceRecordSetsRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.ChangeBatch !== undefined) {
                    node = serializeAws_restXmlChangeBatch(input.ChangeBatch, context).withName("ChangeBatch");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlChangeTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, nodes, containerNode_2, nodes, containerNode_3;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/tags/{ResourceType}/{ResourceId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceType", function () { return input.ResourceType; }, "{ResourceType}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceId", function () { return input.ResourceId; }, "{ResourceId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("ChangeTagsForResourceRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.AddTags !== undefined) {
                    nodes = serializeAws_restXmlTagList(input.AddTags, context);
                    containerNode_2 = new __XmlNode("AddTags");
                    nodes.map(function (node) {
                        containerNode_2.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_2);
                }
                if (input.RemoveTagKeys !== undefined) {
                    nodes = serializeAws_restXmlTagKeyList(input.RemoveTagKeys, context);
                    containerNode_3 = new __XmlNode("RemoveTagKeys");
                    nodes.map(function (node) {
                        containerNode_3.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_3);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateCidrCollectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/cidrcollection";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateCidrCollectionRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.CallerReference !== undefined) {
                    node = __XmlNode.of("CidrNonce", input.CallerReference).withName("CallerReference");
                    bodyNode.addChildNode(node);
                }
                if (input.Name !== undefined) {
                    node = __XmlNode.of("CollectionName", input.Name).withName("Name");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateHealthCheckCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/healthcheck";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateHealthCheckRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.CallerReference !== undefined) {
                    node = __XmlNode.of("HealthCheckNonce", input.CallerReference).withName("CallerReference");
                    bodyNode.addChildNode(node);
                }
                if (input.HealthCheckConfig !== undefined) {
                    node = serializeAws_restXmlHealthCheckConfig(input.HealthCheckConfig, context).withName("HealthCheckConfig");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateHostedZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node, node, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzone";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateHostedZoneRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.CallerReference !== undefined) {
                    node = __XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
                    bodyNode.addChildNode(node);
                }
                if (input.DelegationSetId !== undefined) {
                    node = __XmlNode.of("ResourceId", input.DelegationSetId).withName("DelegationSetId");
                    bodyNode.addChildNode(node);
                }
                if (input.HostedZoneConfig !== undefined) {
                    node = serializeAws_restXmlHostedZoneConfig(input.HostedZoneConfig, context).withName("HostedZoneConfig");
                    bodyNode.addChildNode(node);
                }
                if (input.Name !== undefined) {
                    node = __XmlNode.of("DNSName", input.Name).withName("Name");
                    bodyNode.addChildNode(node);
                }
                if (input.VPC !== undefined) {
                    node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateKeySigningKeyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node, node, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/keysigningkey";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateKeySigningKeyRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.CallerReference !== undefined) {
                    node = __XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
                    bodyNode.addChildNode(node);
                }
                if (input.HostedZoneId !== undefined) {
                    node = __XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
                    bodyNode.addChildNode(node);
                }
                if (input.KeyManagementServiceArn !== undefined) {
                    node = __XmlNode.of("SigningKeyString", input.KeyManagementServiceArn).withName("KeyManagementServiceArn");
                    bodyNode.addChildNode(node);
                }
                if (input.Name !== undefined) {
                    node = __XmlNode.of("SigningKeyName", input.Name).withName("Name");
                    bodyNode.addChildNode(node);
                }
                if (input.Status !== undefined) {
                    node = __XmlNode.of("SigningKeyStatus", input.Status).withName("Status");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateQueryLoggingConfigCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/queryloggingconfig";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateQueryLoggingConfigRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.CloudWatchLogsLogGroupArn !== undefined) {
                    node = __XmlNode
                        .of("CloudWatchLogsLogGroupArn", input.CloudWatchLogsLogGroupArn)
                        .withName("CloudWatchLogsLogGroupArn");
                    bodyNode.addChildNode(node);
                }
                if (input.HostedZoneId !== undefined) {
                    node = __XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateReusableDelegationSetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/delegationset";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateReusableDelegationSetRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.CallerReference !== undefined) {
                    node = __XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
                    bodyNode.addChildNode(node);
                }
                if (input.HostedZoneId !== undefined) {
                    node = __XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateTrafficPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicy";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateTrafficPolicyRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Comment !== undefined) {
                    node = __XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
                    bodyNode.addChildNode(node);
                }
                if (input.Document !== undefined) {
                    node = __XmlNode.of("TrafficPolicyDocument", input.Document).withName("Document");
                    bodyNode.addChildNode(node);
                }
                if (input.Name !== undefined) {
                    node = __XmlNode.of("TrafficPolicyName", input.Name).withName("Name");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateTrafficPolicyInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node, node, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicyinstance";
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateTrafficPolicyInstanceRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.HostedZoneId !== undefined) {
                    node = __XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
                    bodyNode.addChildNode(node);
                }
                if (input.Name !== undefined) {
                    node = __XmlNode.of("DNSName", input.Name).withName("Name");
                    bodyNode.addChildNode(node);
                }
                if (input.TTL !== undefined) {
                    node = __XmlNode.of("TTL", String(input.TTL)).withName("TTL");
                    bodyNode.addChildNode(node);
                }
                if (input.TrafficPolicyId !== undefined) {
                    node = __XmlNode.of("TrafficPolicyId", input.TrafficPolicyId).withName("TrafficPolicyId");
                    bodyNode.addChildNode(node);
                }
                if (input.TrafficPolicyVersion !== undefined) {
                    node = __XmlNode
                        .of("TrafficPolicyVersion", String(input.TrafficPolicyVersion))
                        .withName("TrafficPolicyVersion");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateTrafficPolicyVersionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicy/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateTrafficPolicyVersionRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Comment !== undefined) {
                    node = __XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
                    bodyNode.addChildNode(node);
                }
                if (input.Document !== undefined) {
                    node = __XmlNode.of("TrafficPolicyDocument", input.Document).withName("Document");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlCreateVPCAssociationAuthorizationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("CreateVPCAssociationAuthorizationRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.VPC !== undefined) {
                    node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeactivateKeySigningKeyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Name", function () { return input.Name; }, "{Name}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteCidrCollectionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/cidrcollection/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteHealthCheckCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/healthcheck/{HealthCheckId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "HealthCheckId", function () { return input.HealthCheckId; }, "{HealthCheckId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteHostedZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzone/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteKeySigningKeyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Name", function () { return input.Name; }, "{Name}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteQueryLoggingConfigCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/queryloggingconfig/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteReusableDelegationSetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/delegationset/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteTrafficPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicy/{Id}/{Version}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Version", function () { return input.Version.toString(); }, "{Version}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteTrafficPolicyInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicyinstance/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/deauthorizevpcassociation";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("DeleteVPCAssociationAuthorizationRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.VPC !== undefined) {
                    node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDisableHostedZoneDNSSECCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/disable-dnssec";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlDisassociateVPCFromHostedZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/disassociatevpc";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("DisassociateVPCFromHostedZoneRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Comment !== undefined) {
                    node = __XmlNode.of("DisassociateVPCComment", input.Comment).withName("Comment");
                    bodyNode.addChildNode(node);
                }
                if (input.VPC !== undefined) {
                    node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlEnableHostedZoneDNSSECCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/enable-dnssec";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetAccountLimitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/accountlimit/{Type}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Type", function () { return input.Type; }, "{Type}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetChangeCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/change/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetCheckerIpRangesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/checkeripranges";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetDNSSECCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/dnssec";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetGeoLocationCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/geolocation";
                query = map({
                    continentcode: [, input.ContinentCode],
                    countrycode: [, input.CountryCode],
                    subdivisioncode: [, input.SubdivisionCode],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHealthCheckCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/healthcheck/{HealthCheckId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "HealthCheckId", function () { return input.HealthCheckId; }, "{HealthCheckId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHealthCheckCountCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/healthcheckcount";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHealthCheckLastFailureReasonCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason";
                resolvedPath = __resolvedPath(resolvedPath, input, "HealthCheckId", function () { return input.HealthCheckId; }, "{HealthCheckId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHealthCheckStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/healthcheck/{HealthCheckId}/status";
                resolvedPath = __resolvedPath(resolvedPath, input, "HealthCheckId", function () { return input.HealthCheckId; }, "{HealthCheckId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHostedZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzone/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHostedZoneCountCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzonecount";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetHostedZoneLimitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzonelimit/{HostedZoneId}/{Type}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Type", function () { return input.Type; }, "{Type}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetQueryLoggingConfigCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/queryloggingconfig/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetReusableDelegationSetCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/delegationset/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetReusableDelegationSetLimitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/reusabledelegationsetlimit/{DelegationSetId}/{Type}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Type", function () { return input.Type; }, "{Type}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "DelegationSetId", function () { return input.DelegationSetId; }, "{DelegationSetId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetTrafficPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicy/{Id}/{Version}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Version", function () { return input.Version.toString(); }, "{Version}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetTrafficPolicyInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicyinstance/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlGetTrafficPolicyInstanceCountCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicyinstancecount";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListCidrBlocksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/cidrcollection/{CollectionId}/cidrblocks";
                resolvedPath = __resolvedPath(resolvedPath, input, "CollectionId", function () { return input.CollectionId; }, "{CollectionId}", false);
                query = map({
                    location: [, input.LocationName],
                    nexttoken: [, input.NextToken],
                    maxresults: [function () { return input.MaxResults !== void 0; }, function () { return input.MaxResults.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListCidrCollectionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/cidrcollection";
                query = map({
                    nexttoken: [, input.NextToken],
                    maxresults: [function () { return input.MaxResults !== void 0; }, function () { return input.MaxResults.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListCidrLocationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/cidrcollection/{CollectionId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "CollectionId", function () { return input.CollectionId; }, "{CollectionId}", false);
                query = map({
                    nexttoken: [, input.NextToken],
                    maxresults: [function () { return input.MaxResults !== void 0; }, function () { return input.MaxResults.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListGeoLocationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/geolocations";
                query = map({
                    startcontinentcode: [, input.StartContinentCode],
                    startcountrycode: [, input.StartCountryCode],
                    startsubdivisioncode: [, input.StartSubdivisionCode],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListHealthChecksCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/healthcheck";
                query = map({
                    marker: [, input.Marker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListHostedZonesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzone";
                query = map({
                    marker: [, input.Marker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                    delegationsetid: [, input.DelegationSetId],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListHostedZonesByNameCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzonesbyname";
                query = map({
                    dnsname: [, input.DNSName],
                    hostedzoneid: [, input.HostedZoneId],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListHostedZonesByVPCCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzonesbyvpc";
                query = map({
                    vpcid: [, input.VPCId],
                    vpcregion: [, input.VPCRegion],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                    nexttoken: [, input.NextToken],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListQueryLoggingConfigsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/queryloggingconfig";
                query = map({
                    hostedzoneid: [, input.HostedZoneId],
                    nexttoken: [, input.NextToken],
                    maxresults: [function () { return input.MaxResults !== void 0; }, function () { return input.MaxResults.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListResourceRecordSetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/rrset";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                query = map({
                    name: [, input.StartRecordName],
                    type: [, input.StartRecordType],
                    identifier: [, input.StartRecordIdentifier],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListReusableDelegationSetsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/delegationset";
                query = map({
                    marker: [, input.Marker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/tags/{ResourceType}/{ResourceId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceType", function () { return input.ResourceType; }, "{ResourceType}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceId", function () { return input.ResourceId; }, "{ResourceId}", false);
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTagsForResourcesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, nodes, containerNode_4;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/tags/{ResourceType}";
                resolvedPath = __resolvedPath(resolvedPath, input, "ResourceType", function () { return input.ResourceType; }, "{ResourceType}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("ListTagsForResourcesRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.ResourceIds !== undefined) {
                    nodes = serializeAws_restXmlTagResourceIdList(input.ResourceIds, context);
                    containerNode_4 = new __XmlNode("ResourceIds");
                    nodes.map(function (node) {
                        containerNode_4.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_4);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTrafficPoliciesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicies";
                query = map({
                    trafficpolicyid: [, input.TrafficPolicyIdMarker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTrafficPolicyInstancesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicyinstances";
                query = map({
                    hostedzoneid: [, input.HostedZoneIdMarker],
                    trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
                    trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/trafficpolicyinstances/hostedzone";
                query = map({
                    id: [, input.HostedZoneId],
                    trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
                    trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/trafficpolicyinstances/trafficpolicy";
                query = map({
                    id: [, input.TrafficPolicyId],
                    version: [function () { return input.TrafficPolicyVersion !== void 0; }, function () { return input.TrafficPolicyVersion.toString(); }],
                    hostedzoneid: [, input.HostedZoneIdMarker],
                    trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
                    trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListTrafficPolicyVersionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicies/{Id}/versions";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                query = map({
                    trafficpolicyversion: [, input.TrafficPolicyVersionMarker],
                    maxitems: [function () { return input.MaxItems !== void 0; }, function () { return input.MaxItems.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlListVPCAssociationAuthorizationsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation";
                resolvedPath = __resolvedPath(resolvedPath, input, "HostedZoneId", function () { return input.HostedZoneId; }, "{HostedZoneId}", false);
                query = map({
                    nexttoken: [, input.NextToken],
                    maxresults: [function () { return input.MaxResults !== void 0; }, function () { return input.MaxResults.toString(); }],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlTestDNSAnswerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/testdnsanswer";
                query = map({
                    hostedzoneid: [, input.HostedZoneId],
                    recordname: [, input.RecordName],
                    recordtype: [, input.RecordType],
                    resolverip: [, input.ResolverIP],
                    edns0clientsubnetip: [, input.EDNS0ClientSubnetIP],
                    edns0clientsubnetmask: [, input.EDNS0ClientSubnetMask],
                });
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlUpdateHealthCheckCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, nodes, containerNode_5, node, node, node, node, node, node, node, node, node, node, nodes, containerNode_6, nodes, containerNode_7, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/healthcheck/{HealthCheckId}";
                resolvedPath = __resolvedPath(resolvedPath, input, "HealthCheckId", function () { return input.HealthCheckId; }, "{HealthCheckId}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("UpdateHealthCheckRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.AlarmIdentifier !== undefined) {
                    node = serializeAws_restXmlAlarmIdentifier(input.AlarmIdentifier, context).withName("AlarmIdentifier");
                    bodyNode.addChildNode(node);
                }
                if (input.ChildHealthChecks !== undefined) {
                    nodes = serializeAws_restXmlChildHealthCheckList(input.ChildHealthChecks, context);
                    containerNode_5 = new __XmlNode("ChildHealthChecks");
                    nodes.map(function (node) {
                        containerNode_5.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_5);
                }
                if (input.Disabled !== undefined) {
                    node = __XmlNode.of("Disabled", String(input.Disabled)).withName("Disabled");
                    bodyNode.addChildNode(node);
                }
                if (input.EnableSNI !== undefined) {
                    node = __XmlNode.of("EnableSNI", String(input.EnableSNI)).withName("EnableSNI");
                    bodyNode.addChildNode(node);
                }
                if (input.FailureThreshold !== undefined) {
                    node = __XmlNode.of("FailureThreshold", String(input.FailureThreshold)).withName("FailureThreshold");
                    bodyNode.addChildNode(node);
                }
                if (input.FullyQualifiedDomainName !== undefined) {
                    node = __XmlNode
                        .of("FullyQualifiedDomainName", input.FullyQualifiedDomainName)
                        .withName("FullyQualifiedDomainName");
                    bodyNode.addChildNode(node);
                }
                if (input.HealthCheckVersion !== undefined) {
                    node = __XmlNode.of("HealthCheckVersion", String(input.HealthCheckVersion)).withName("HealthCheckVersion");
                    bodyNode.addChildNode(node);
                }
                if (input.HealthThreshold !== undefined) {
                    node = __XmlNode.of("HealthThreshold", String(input.HealthThreshold)).withName("HealthThreshold");
                    bodyNode.addChildNode(node);
                }
                if (input.IPAddress !== undefined) {
                    node = __XmlNode.of("IPAddress", input.IPAddress).withName("IPAddress");
                    bodyNode.addChildNode(node);
                }
                if (input.InsufficientDataHealthStatus !== undefined) {
                    node = __XmlNode
                        .of("InsufficientDataHealthStatus", input.InsufficientDataHealthStatus)
                        .withName("InsufficientDataHealthStatus");
                    bodyNode.addChildNode(node);
                }
                if (input.Inverted !== undefined) {
                    node = __XmlNode.of("Inverted", String(input.Inverted)).withName("Inverted");
                    bodyNode.addChildNode(node);
                }
                if (input.Port !== undefined) {
                    node = __XmlNode.of("Port", String(input.Port)).withName("Port");
                    bodyNode.addChildNode(node);
                }
                if (input.Regions !== undefined) {
                    nodes = serializeAws_restXmlHealthCheckRegionList(input.Regions, context);
                    containerNode_6 = new __XmlNode("Regions");
                    nodes.map(function (node) {
                        containerNode_6.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_6);
                }
                if (input.ResetElements !== undefined) {
                    nodes = serializeAws_restXmlResettableElementNameList(input.ResetElements, context);
                    containerNode_7 = new __XmlNode("ResetElements");
                    nodes.map(function (node) {
                        containerNode_7.addChildNode(node);
                    });
                    bodyNode.addChildNode(containerNode_7);
                }
                if (input.ResourcePath !== undefined) {
                    node = __XmlNode.of("ResourcePath", input.ResourcePath).withName("ResourcePath");
                    bodyNode.addChildNode(node);
                }
                if (input.SearchString !== undefined) {
                    node = __XmlNode.of("SearchString", input.SearchString).withName("SearchString");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlUpdateHostedZoneCommentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/hostedzone/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("UpdateHostedZoneCommentRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Comment !== undefined) {
                    node = __XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlUpdateTrafficPolicyCommentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicy/{Id}/{Version}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                resolvedPath = __resolvedPath(resolvedPath, input, "Version", function () { return input.Version.toString(); }, "{Version}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("UpdateTrafficPolicyCommentRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.Comment !== undefined) {
                    node = __XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restXmlUpdateTrafficPolicyInstanceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body, bodyNode, node, node, node;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/xml",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/2013-04-01/trafficpolicyinstance/{Id}";
                resolvedPath = __resolvedPath(resolvedPath, input, "Id", function () { return input.Id; }, "{Id}", false);
                body = '<?xml version="1.0" encoding="UTF-8"?>';
                bodyNode = new __XmlNode("UpdateTrafficPolicyInstanceRequest");
                bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
                if (input.TTL !== undefined) {
                    node = __XmlNode.of("TTL", String(input.TTL)).withName("TTL");
                    bodyNode.addChildNode(node);
                }
                if (input.TrafficPolicyId !== undefined) {
                    node = __XmlNode.of("TrafficPolicyId", input.TrafficPolicyId).withName("TrafficPolicyId");
                    bodyNode.addChildNode(node);
                }
                if (input.TrafficPolicyVersion !== undefined) {
                    node = __XmlNode
                        .of("TrafficPolicyVersion", String(input.TrafficPolicyVersion))
                        .withName("TrafficPolicyVersion");
                    bodyNode.addChildNode(node);
                }
                body += bodyNode.toString();
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var deserializeAws_restXmlActivateKeySigningKeyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlActivateKeySigningKeyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlActivateKeySigningKeyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidKeySigningKeyStatus": return [3, 6];
                    case "com.amazonaws.route53#InvalidKeySigningKeyStatus": return [3, 6];
                    case "InvalidKMSArn": return [3, 8];
                    case "com.amazonaws.route53#InvalidKMSArn": return [3, 8];
                    case "InvalidSigningStatus": return [3, 10];
                    case "com.amazonaws.route53#InvalidSigningStatus": return [3, 10];
                    case "NoSuchKeySigningKey": return [3, 12];
                    case "com.amazonaws.route53#NoSuchKeySigningKey": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlNoSuchKeySigningKeyResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restXmlAssociateVPCWithHostedZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlAssociateVPCWithHostedZoneCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlAssociateVPCWithHostedZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConflictingDomainExists": return [3, 2];
                    case "com.amazonaws.route53#ConflictingDomainExists": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidVPCId": return [3, 6];
                    case "com.amazonaws.route53#InvalidVPCId": return [3, 6];
                    case "LimitsExceeded": return [3, 8];
                    case "com.amazonaws.route53#LimitsExceeded": return [3, 8];
                    case "NoSuchHostedZone": return [3, 10];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 10];
                    case "NotAuthorizedException": return [3, 12];
                    case "com.amazonaws.route53#NotAuthorizedException": return [3, 12];
                    case "PriorRequestNotComplete": return [3, 14];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 14];
                    case "PublicZoneVPCAssociation": return [3, 16];
                    case "com.amazonaws.route53#PublicZoneVPCAssociation": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restXmlConflictingDomainExistsResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlNotAuthorizedExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restXmlPublicZoneVPCAssociationResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 19;
            case 19: return [2];
        }
    });
}); };
export var deserializeAws_restXmlChangeCidrCollectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlChangeCidrCollectionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Id"] !== undefined) {
                    contents.Id = __expectString(data["Id"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlChangeCidrCollectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CidrBlockInUseException": return [3, 2];
                    case "com.amazonaws.route53#CidrBlockInUseException": return [3, 2];
                    case "CidrCollectionVersionMismatchException": return [3, 4];
                    case "com.amazonaws.route53#CidrCollectionVersionMismatchException": return [3, 4];
                    case "ConcurrentModification": return [3, 6];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 6];
                    case "InvalidInput": return [3, 8];
                    case "com.amazonaws.route53#InvalidInput": return [3, 8];
                    case "LimitsExceeded": return [3, 10];
                    case "com.amazonaws.route53#LimitsExceeded": return [3, 10];
                    case "NoSuchCidrCollectionException": return [3, 12];
                    case "com.amazonaws.route53#NoSuchCidrCollectionException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restXmlCidrBlockInUseExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlCidrCollectionVersionMismatchExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restXmlChangeResourceRecordSetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlChangeResourceRecordSetsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlChangeResourceRecordSetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidChangeBatch": return [3, 2];
                    case "com.amazonaws.route53#InvalidChangeBatch": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchHealthCheck": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 6];
                    case "NoSuchHostedZone": return [3, 8];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 8];
                    case "PriorRequestNotComplete": return [3, 10];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlInvalidChangeBatchResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlChangeTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlChangeTagsForResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlChangeTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHealthCheck": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                    case "PriorRequestNotComplete": return [3, 8];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 8];
                    case "ThrottlingException": return [3, 10];
                    case "com.amazonaws.route53#ThrottlingException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlThrottlingExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateCidrCollectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateCidrCollectionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Collection"] !== undefined) {
                    contents.Collection = deserializeAws_restXmlCidrCollection(data["Collection"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateCidrCollectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CidrCollectionAlreadyExistsException": return [3, 2];
                    case "com.amazonaws.route53#CidrCollectionAlreadyExistsException": return [3, 2];
                    case "ConcurrentModification": return [3, 4];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 4];
                    case "InvalidInput": return [3, 6];
                    case "com.amazonaws.route53#InvalidInput": return [3, 6];
                    case "LimitsExceeded": return [3, 8];
                    case "com.amazonaws.route53#LimitsExceeded": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restXmlCidrCollectionAlreadyExistsExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateHealthCheckCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateHealthCheckCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HealthCheck"] !== undefined) {
                    contents.HealthCheck = deserializeAws_restXmlHealthCheck(data["HealthCheck"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateHealthCheckCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "HealthCheckAlreadyExists": return [3, 2];
                    case "com.amazonaws.route53#HealthCheckAlreadyExists": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "TooManyHealthChecks": return [3, 6];
                    case "com.amazonaws.route53#TooManyHealthChecks": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlHealthCheckAlreadyExistsResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlTooManyHealthChecksResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateHostedZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateHostedZoneCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                if (data["DelegationSet"] !== undefined) {
                    contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
                }
                if (data["HostedZone"] !== undefined) {
                    contents.HostedZone = deserializeAws_restXmlHostedZone(data["HostedZone"], context);
                }
                if (data["VPC"] !== undefined) {
                    contents.VPC = deserializeAws_restXmlVPC(data["VPC"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateHostedZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConflictingDomainExists": return [3, 2];
                    case "com.amazonaws.route53#ConflictingDomainExists": return [3, 2];
                    case "DelegationSetNotAvailable": return [3, 4];
                    case "com.amazonaws.route53#DelegationSetNotAvailable": return [3, 4];
                    case "DelegationSetNotReusable": return [3, 6];
                    case "com.amazonaws.route53#DelegationSetNotReusable": return [3, 6];
                    case "HostedZoneAlreadyExists": return [3, 8];
                    case "com.amazonaws.route53#HostedZoneAlreadyExists": return [3, 8];
                    case "InvalidDomainName": return [3, 10];
                    case "com.amazonaws.route53#InvalidDomainName": return [3, 10];
                    case "InvalidInput": return [3, 12];
                    case "com.amazonaws.route53#InvalidInput": return [3, 12];
                    case "InvalidVPCId": return [3, 14];
                    case "com.amazonaws.route53#InvalidVPCId": return [3, 14];
                    case "NoSuchDelegationSet": return [3, 16];
                    case "com.amazonaws.route53#NoSuchDelegationSet": return [3, 16];
                    case "TooManyHostedZones": return [3, 18];
                    case "com.amazonaws.route53#TooManyHostedZones": return [3, 18];
                }
                return [3, 20];
            case 2: return [4, deserializeAws_restXmlConflictingDomainExistsResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlDelegationSetNotAvailableResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlHostedZoneAlreadyExistsResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidDomainNameResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18: return [4, deserializeAws_restXmlTooManyHostedZonesResponse(parsedOutput, context)];
            case 19: throw _d.sent();
            case 20:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 21;
            case 21: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateKeySigningKeyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateKeySigningKeyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                if (data["KeySigningKey"] !== undefined) {
                    contents.KeySigningKey = deserializeAws_restXmlKeySigningKey(data["KeySigningKey"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateKeySigningKeyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidArgument": return [3, 4];
                    case "com.amazonaws.route53#InvalidArgument": return [3, 4];
                    case "InvalidInput": return [3, 6];
                    case "com.amazonaws.route53#InvalidInput": return [3, 6];
                    case "InvalidKeySigningKeyName": return [3, 8];
                    case "com.amazonaws.route53#InvalidKeySigningKeyName": return [3, 8];
                    case "InvalidKeySigningKeyStatus": return [3, 10];
                    case "com.amazonaws.route53#InvalidKeySigningKeyStatus": return [3, 10];
                    case "InvalidKMSArn": return [3, 12];
                    case "com.amazonaws.route53#InvalidKMSArn": return [3, 12];
                    case "InvalidSigningStatus": return [3, 14];
                    case "com.amazonaws.route53#InvalidSigningStatus": return [3, 14];
                    case "KeySigningKeyAlreadyExists": return [3, 16];
                    case "com.amazonaws.route53#KeySigningKeyAlreadyExists": return [3, 16];
                    case "NoSuchHostedZone": return [3, 18];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 18];
                    case "TooManyKeySigningKeys": return [3, 20];
                    case "com.amazonaws.route53#TooManyKeySigningKeys": return [3, 20];
                }
                return [3, 22];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidKeySigningKeyNameResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restXmlKeySigningKeyAlreadyExistsResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 19: throw _d.sent();
            case 20: return [4, deserializeAws_restXmlTooManyKeySigningKeysResponse(parsedOutput, context)];
            case 21: throw _d.sent();
            case 22:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 23;
            case 23: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateQueryLoggingConfigCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateQueryLoggingConfigCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["QueryLoggingConfig"] !== undefined) {
                    contents.QueryLoggingConfig = deserializeAws_restXmlQueryLoggingConfig(data["QueryLoggingConfig"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateQueryLoggingConfigCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InsufficientCloudWatchLogsResourcePolicy": return [3, 4];
                    case "com.amazonaws.route53#InsufficientCloudWatchLogsResourcePolicy": return [3, 4];
                    case "InvalidInput": return [3, 6];
                    case "com.amazonaws.route53#InvalidInput": return [3, 6];
                    case "NoSuchCloudWatchLogsLogGroup": return [3, 8];
                    case "com.amazonaws.route53#NoSuchCloudWatchLogsLogGroup": return [3, 8];
                    case "NoSuchHostedZone": return [3, 10];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 10];
                    case "QueryLoggingConfigAlreadyExists": return [3, 12];
                    case "com.amazonaws.route53#QueryLoggingConfigAlreadyExists": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInsufficientCloudWatchLogsResourcePolicyResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchCloudWatchLogsLogGroupResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlQueryLoggingConfigAlreadyExistsResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateReusableDelegationSetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateReusableDelegationSetCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["DelegationSet"] !== undefined) {
                    contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateReusableDelegationSetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DelegationSetAlreadyCreated": return [3, 2];
                    case "com.amazonaws.route53#DelegationSetAlreadyCreated": return [3, 2];
                    case "DelegationSetAlreadyReusable": return [3, 4];
                    case "com.amazonaws.route53#DelegationSetAlreadyReusable": return [3, 4];
                    case "DelegationSetNotAvailable": return [3, 6];
                    case "com.amazonaws.route53#DelegationSetNotAvailable": return [3, 6];
                    case "HostedZoneNotFound": return [3, 8];
                    case "com.amazonaws.route53#HostedZoneNotFound": return [3, 8];
                    case "InvalidArgument": return [3, 10];
                    case "com.amazonaws.route53#InvalidArgument": return [3, 10];
                    case "InvalidInput": return [3, 12];
                    case "com.amazonaws.route53#InvalidInput": return [3, 12];
                    case "LimitsExceeded": return [3, 14];
                    case "com.amazonaws.route53#LimitsExceeded": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restXmlDelegationSetAlreadyCreatedResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlDelegationSetAlreadyReusableResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlDelegationSetNotAvailableResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlHostedZoneNotFoundResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateTrafficPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateTrafficPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicy"] !== undefined) {
                    contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateTrafficPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "InvalidTrafficPolicyDocument": return [3, 4];
                    case "com.amazonaws.route53#InvalidTrafficPolicyDocument": return [3, 4];
                    case "TooManyTrafficPolicies": return [3, 6];
                    case "com.amazonaws.route53#TooManyTrafficPolicies": return [3, 6];
                    case "TrafficPolicyAlreadyExists": return [3, 8];
                    case "com.amazonaws.route53#TrafficPolicyAlreadyExists": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidTrafficPolicyDocumentResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlTooManyTrafficPoliciesResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlTrafficPolicyAlreadyExistsResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateTrafficPolicyInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateTrafficPolicyInstanceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicyInstance"] !== undefined) {
                    contents.TrafficPolicyInstance = deserializeAws_restXmlTrafficPolicyInstance(data["TrafficPolicyInstance"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateTrafficPolicyInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHostedZone": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 4];
                    case "NoSuchTrafficPolicy": return [3, 6];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 6];
                    case "TooManyTrafficPolicyInstances": return [3, 8];
                    case "com.amazonaws.route53#TooManyTrafficPolicyInstances": return [3, 8];
                    case "TrafficPolicyInstanceAlreadyExists": return [3, 10];
                    case "com.amazonaws.route53#TrafficPolicyInstanceAlreadyExists": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlTooManyTrafficPolicyInstancesResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlTrafficPolicyInstanceAlreadyExistsResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateTrafficPolicyVersionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateTrafficPolicyVersionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                    Location: [, output.headers["location"]],
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicy"] !== undefined) {
                    contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateTrafficPolicyVersionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidTrafficPolicyDocument": return [3, 6];
                    case "com.amazonaws.route53#InvalidTrafficPolicyDocument": return [3, 6];
                    case "NoSuchTrafficPolicy": return [3, 8];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 8];
                    case "TooManyTrafficPolicyVersionsForCurrentPolicy": return [3, 10];
                    case "com.amazonaws.route53#TooManyTrafficPolicyVersionsForCurrentPolicy": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidTrafficPolicyDocumentResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlTooManyTrafficPolicyVersionsForCurrentPolicyResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlCreateVPCAssociationAuthorizationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlCreateVPCAssociationAuthorizationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HostedZoneId"] !== undefined) {
                    contents.HostedZoneId = __expectString(data["HostedZoneId"]);
                }
                if (data["VPC"] !== undefined) {
                    contents.VPC = deserializeAws_restXmlVPC(data["VPC"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlCreateVPCAssociationAuthorizationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidVPCId": return [3, 6];
                    case "com.amazonaws.route53#InvalidVPCId": return [3, 6];
                    case "NoSuchHostedZone": return [3, 8];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 8];
                    case "TooManyVPCAssociationAuthorizations": return [3, 10];
                    case "com.amazonaws.route53#TooManyVPCAssociationAuthorizations": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlTooManyVPCAssociationAuthorizationsResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeactivateKeySigningKeyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeactivateKeySigningKeyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeactivateKeySigningKeyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidKeySigningKeyStatus": return [3, 6];
                    case "com.amazonaws.route53#InvalidKeySigningKeyStatus": return [3, 6];
                    case "InvalidSigningStatus": return [3, 8];
                    case "com.amazonaws.route53#InvalidSigningStatus": return [3, 8];
                    case "KeySigningKeyInParentDSRecord": return [3, 10];
                    case "com.amazonaws.route53#KeySigningKeyInParentDSRecord": return [3, 10];
                    case "KeySigningKeyInUse": return [3, 12];
                    case "com.amazonaws.route53#KeySigningKeyInUse": return [3, 12];
                    case "NoSuchKeySigningKey": return [3, 14];
                    case "com.amazonaws.route53#NoSuchKeySigningKey": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlKeySigningKeyInParentDSRecordResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlKeySigningKeyInUseResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlNoSuchKeySigningKeyResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteCidrCollectionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteCidrCollectionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteCidrCollectionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CidrCollectionInUseException": return [3, 2];
                    case "com.amazonaws.route53#CidrCollectionInUseException": return [3, 2];
                    case "ConcurrentModification": return [3, 4];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 4];
                    case "InvalidInput": return [3, 6];
                    case "com.amazonaws.route53#InvalidInput": return [3, 6];
                    case "NoSuchCidrCollectionException": return [3, 8];
                    case "com.amazonaws.route53#NoSuchCidrCollectionException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restXmlCidrCollectionInUseExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteHealthCheckCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteHealthCheckCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteHealthCheckCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "HealthCheckInUse": return [3, 2];
                    case "com.amazonaws.route53#HealthCheckInUse": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchHealthCheck": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlHealthCheckInUseResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteHostedZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteHostedZoneCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteHostedZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "HostedZoneNotEmpty": return [3, 2];
                    case "com.amazonaws.route53#HostedZoneNotEmpty": return [3, 2];
                    case "InvalidDomainName": return [3, 4];
                    case "com.amazonaws.route53#InvalidDomainName": return [3, 4];
                    case "InvalidInput": return [3, 6];
                    case "com.amazonaws.route53#InvalidInput": return [3, 6];
                    case "NoSuchHostedZone": return [3, 8];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 8];
                    case "PriorRequestNotComplete": return [3, 10];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlHostedZoneNotEmptyResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidDomainNameResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteKeySigningKeyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteKeySigningKeyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteKeySigningKeyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidKeySigningKeyStatus": return [3, 6];
                    case "com.amazonaws.route53#InvalidKeySigningKeyStatus": return [3, 6];
                    case "InvalidKMSArn": return [3, 8];
                    case "com.amazonaws.route53#InvalidKMSArn": return [3, 8];
                    case "InvalidSigningStatus": return [3, 10];
                    case "com.amazonaws.route53#InvalidSigningStatus": return [3, 10];
                    case "NoSuchKeySigningKey": return [3, 12];
                    case "com.amazonaws.route53#NoSuchKeySigningKey": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlNoSuchKeySigningKeyResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteQueryLoggingConfigCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteQueryLoggingConfigCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteQueryLoggingConfigCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchQueryLoggingConfig": return [3, 6];
                    case "com.amazonaws.route53#NoSuchQueryLoggingConfig": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchQueryLoggingConfigResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteReusableDelegationSetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteReusableDelegationSetCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteReusableDelegationSetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DelegationSetInUse": return [3, 2];
                    case "com.amazonaws.route53#DelegationSetInUse": return [3, 2];
                    case "DelegationSetNotReusable": return [3, 4];
                    case "com.amazonaws.route53#DelegationSetNotReusable": return [3, 4];
                    case "InvalidInput": return [3, 6];
                    case "com.amazonaws.route53#InvalidInput": return [3, 6];
                    case "NoSuchDelegationSet": return [3, 8];
                    case "com.amazonaws.route53#NoSuchDelegationSet": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restXmlDelegationSetInUseResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteTrafficPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteTrafficPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteTrafficPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchTrafficPolicy": return [3, 6];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 6];
                    case "TrafficPolicyInUse": return [3, 8];
                    case "com.amazonaws.route53#TrafficPolicyInUse": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlTrafficPolicyInUseResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 11;
            case 11: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteTrafficPolicyInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteTrafficPolicyInstanceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteTrafficPolicyInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchTrafficPolicyInstance": return [3, 4];
                    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance": return [3, 4];
                    case "PriorRequestNotComplete": return [3, 6];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "InvalidVPCId": return [3, 6];
                    case "com.amazonaws.route53#InvalidVPCId": return [3, 6];
                    case "NoSuchHostedZone": return [3, 8];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 8];
                    case "VPCAssociationAuthorizationNotFound": return [3, 10];
                    case "com.amazonaws.route53#VPCAssociationAuthorizationNotFound": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlVPCAssociationAuthorizationNotFoundResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDisableHostedZoneDNSSECCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDisableHostedZoneDNSSECCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDisableHostedZoneDNSSECCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "DNSSECNotFound": return [3, 4];
                    case "com.amazonaws.route53#DNSSECNotFound": return [3, 4];
                    case "InvalidArgument": return [3, 6];
                    case "com.amazonaws.route53#InvalidArgument": return [3, 6];
                    case "InvalidInput": return [3, 8];
                    case "com.amazonaws.route53#InvalidInput": return [3, 8];
                    case "InvalidKeySigningKeyStatus": return [3, 10];
                    case "com.amazonaws.route53#InvalidKeySigningKeyStatus": return [3, 10];
                    case "InvalidKMSArn": return [3, 12];
                    case "com.amazonaws.route53#InvalidKMSArn": return [3, 12];
                    case "KeySigningKeyInParentDSRecord": return [3, 14];
                    case "com.amazonaws.route53#KeySigningKeyInParentDSRecord": return [3, 14];
                    case "NoSuchHostedZone": return [3, 16];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlDNSSECNotFoundResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlKeySigningKeyInParentDSRecordResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 19;
            case 19: return [2];
        }
    });
}); };
export var deserializeAws_restXmlDisassociateVPCFromHostedZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlDisassociateVPCFromHostedZoneCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlDisassociateVPCFromHostedZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "InvalidVPCId": return [3, 4];
                    case "com.amazonaws.route53#InvalidVPCId": return [3, 4];
                    case "LastVPCAssociation": return [3, 6];
                    case "com.amazonaws.route53#LastVPCAssociation": return [3, 6];
                    case "NoSuchHostedZone": return [3, 8];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 8];
                    case "VPCAssociationNotFound": return [3, 10];
                    case "com.amazonaws.route53#VPCAssociationNotFound": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlLastVPCAssociationResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlVPCAssociationNotFoundResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlEnableHostedZoneDNSSECCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlEnableHostedZoneDNSSECCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlEnableHostedZoneDNSSECCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "DNSSECNotFound": return [3, 4];
                    case "com.amazonaws.route53#DNSSECNotFound": return [3, 4];
                    case "HostedZonePartiallyDelegated": return [3, 6];
                    case "com.amazonaws.route53#HostedZonePartiallyDelegated": return [3, 6];
                    case "InvalidArgument": return [3, 8];
                    case "com.amazonaws.route53#InvalidArgument": return [3, 8];
                    case "InvalidInput": return [3, 10];
                    case "com.amazonaws.route53#InvalidInput": return [3, 10];
                    case "InvalidKeySigningKeyStatus": return [3, 12];
                    case "com.amazonaws.route53#InvalidKeySigningKeyStatus": return [3, 12];
                    case "InvalidKMSArn": return [3, 14];
                    case "com.amazonaws.route53#InvalidKMSArn": return [3, 14];
                    case "KeySigningKeyWithActiveStatusNotFound": return [3, 16];
                    case "com.amazonaws.route53#KeySigningKeyWithActiveStatusNotFound": return [3, 16];
                    case "NoSuchHostedZone": return [3, 18];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 18];
                }
                return [3, 20];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlDNSSECNotFoundResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlHostedZonePartiallyDelegatedResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restXmlKeySigningKeyWithActiveStatusNotFoundResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 19: throw _d.sent();
            case 20:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 21;
            case 21: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetAccountLimitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetAccountLimitCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Count"] !== undefined) {
                    contents.Count = __strictParseLong(data["Count"]);
                }
                if (data["Limit"] !== undefined) {
                    contents.Limit = deserializeAws_restXmlAccountLimit(data["Limit"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetAccountLimitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetChangeCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetChangeCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ChangeInfo"] !== undefined) {
                    contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetChangeCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchChange": return [3, 4];
                    case "com.amazonaws.route53#NoSuchChange": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchChangeResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetCheckerIpRangesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetCheckerIpRangesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CheckerIpRanges === "") {
                    contents.CheckerIpRanges = [];
                }
                else if (data["CheckerIpRanges"] !== undefined && data["CheckerIpRanges"]["member"] !== undefined) {
                    contents.CheckerIpRanges = deserializeAws_restXmlCheckerIpRanges(__getArrayIfSingleItem(data["CheckerIpRanges"]["member"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetCheckerIpRangesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetDNSSECCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetDNSSECCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.KeySigningKeys === "") {
                    contents.KeySigningKeys = [];
                }
                else if (data["KeySigningKeys"] !== undefined && data["KeySigningKeys"]["member"] !== undefined) {
                    contents.KeySigningKeys = deserializeAws_restXmlKeySigningKeys(__getArrayIfSingleItem(data["KeySigningKeys"]["member"]), context);
                }
                if (data["Status"] !== undefined) {
                    contents.Status = deserializeAws_restXmlDNSSECStatus(data["Status"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetDNSSECCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidArgument": return [3, 2];
                    case "com.amazonaws.route53#InvalidArgument": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetGeoLocationCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetGeoLocationCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["GeoLocationDetails"] !== undefined) {
                    contents.GeoLocationDetails = deserializeAws_restXmlGeoLocationDetails(data["GeoLocationDetails"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetGeoLocationCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchGeoLocation": return [3, 4];
                    case "com.amazonaws.route53#NoSuchGeoLocation": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchGeoLocationResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHealthCheckCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHealthCheckCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HealthCheck"] !== undefined) {
                    contents.HealthCheck = deserializeAws_restXmlHealthCheck(data["HealthCheck"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHealthCheckCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "IncompatibleVersion": return [3, 2];
                    case "com.amazonaws.route53#IncompatibleVersion": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchHealthCheck": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlIncompatibleVersionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHealthCheckCountCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHealthCheckCountCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HealthCheckCount"] !== undefined) {
                    contents.HealthCheckCount = __strictParseLong(data["HealthCheckCount"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHealthCheckCountCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHealthCheckLastFailureReasonCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHealthCheckLastFailureReasonCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.HealthCheckObservations === "") {
                    contents.HealthCheckObservations = [];
                }
                else if (data["HealthCheckObservations"] !== undefined &&
                    data["HealthCheckObservations"]["HealthCheckObservation"] !== undefined) {
                    contents.HealthCheckObservations = deserializeAws_restXmlHealthCheckObservations(__getArrayIfSingleItem(data["HealthCheckObservations"]["HealthCheckObservation"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHealthCheckLastFailureReasonCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHealthCheck": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHealthCheckStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHealthCheckStatusCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.HealthCheckObservations === "") {
                    contents.HealthCheckObservations = [];
                }
                else if (data["HealthCheckObservations"] !== undefined &&
                    data["HealthCheckObservations"]["HealthCheckObservation"] !== undefined) {
                    contents.HealthCheckObservations = deserializeAws_restXmlHealthCheckObservations(__getArrayIfSingleItem(data["HealthCheckObservations"]["HealthCheckObservation"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHealthCheckStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHealthCheck": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHostedZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHostedZoneCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["DelegationSet"] !== undefined) {
                    contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
                }
                if (data["HostedZone"] !== undefined) {
                    contents.HostedZone = deserializeAws_restXmlHostedZone(data["HostedZone"], context);
                }
                if (data.VPCs === "") {
                    contents.VPCs = [];
                }
                else if (data["VPCs"] !== undefined && data["VPCs"]["VPC"] !== undefined) {
                    contents.VPCs = deserializeAws_restXmlVPCs(__getArrayIfSingleItem(data["VPCs"]["VPC"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHostedZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHostedZone": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHostedZoneCountCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHostedZoneCountCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HostedZoneCount"] !== undefined) {
                    contents.HostedZoneCount = __strictParseLong(data["HostedZoneCount"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHostedZoneCountCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetHostedZoneLimitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetHostedZoneLimitCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Count"] !== undefined) {
                    contents.Count = __strictParseLong(data["Count"]);
                }
                if (data["Limit"] !== undefined) {
                    contents.Limit = deserializeAws_restXmlHostedZoneLimit(data["Limit"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetHostedZoneLimitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "HostedZoneNotPrivate": return [3, 2];
                    case "com.amazonaws.route53#HostedZoneNotPrivate": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlHostedZoneNotPrivateResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetQueryLoggingConfigCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetQueryLoggingConfigCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["QueryLoggingConfig"] !== undefined) {
                    contents.QueryLoggingConfig = deserializeAws_restXmlQueryLoggingConfig(data["QueryLoggingConfig"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetQueryLoggingConfigCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchQueryLoggingConfig": return [3, 4];
                    case "com.amazonaws.route53#NoSuchQueryLoggingConfig": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchQueryLoggingConfigResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetReusableDelegationSetCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetReusableDelegationSetCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["DelegationSet"] !== undefined) {
                    contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetReusableDelegationSetCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DelegationSetNotReusable": return [3, 2];
                    case "com.amazonaws.route53#DelegationSetNotReusable": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchDelegationSet": return [3, 6];
                    case "com.amazonaws.route53#NoSuchDelegationSet": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetReusableDelegationSetLimitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetReusableDelegationSetLimitCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Count"] !== undefined) {
                    contents.Count = __strictParseLong(data["Count"]);
                }
                if (data["Limit"] !== undefined) {
                    contents.Limit = deserializeAws_restXmlReusableDelegationSetLimit(data["Limit"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetReusableDelegationSetLimitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchDelegationSet": return [3, 4];
                    case "com.amazonaws.route53#NoSuchDelegationSet": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetTrafficPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetTrafficPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicy"] !== undefined) {
                    contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetTrafficPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchTrafficPolicy": return [3, 4];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetTrafficPolicyInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetTrafficPolicyInstanceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicyInstance"] !== undefined) {
                    contents.TrafficPolicyInstance = deserializeAws_restXmlTrafficPolicyInstance(data["TrafficPolicyInstance"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetTrafficPolicyInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchTrafficPolicyInstance": return [3, 4];
                    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlGetTrafficPolicyInstanceCountCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlGetTrafficPolicyInstanceCountCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicyInstanceCount"] !== undefined) {
                    contents.TrafficPolicyInstanceCount = __strictParseInt32(data["TrafficPolicyInstanceCount"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlGetTrafficPolicyInstanceCountCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, parsedBody;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = [__assign({}, output)];
                _b = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                return [2];
        }
    });
}); };
export var deserializeAws_restXmlListCidrBlocksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListCidrBlocksCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CidrBlocks === "") {
                    contents.CidrBlocks = [];
                }
                else if (data["CidrBlocks"] !== undefined && data["CidrBlocks"]["member"] !== undefined) {
                    contents.CidrBlocks = deserializeAws_restXmlCidrBlockSummaries(__getArrayIfSingleItem(data["CidrBlocks"]["member"]), context);
                }
                if (data["NextToken"] !== undefined) {
                    contents.NextToken = __expectString(data["NextToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListCidrBlocksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchCidrCollectionException": return [3, 4];
                    case "com.amazonaws.route53#NoSuchCidrCollectionException": return [3, 4];
                    case "NoSuchCidrLocationException": return [3, 6];
                    case "com.amazonaws.route53#NoSuchCidrLocationException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchCidrLocationExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListCidrCollectionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListCidrCollectionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CidrCollections === "") {
                    contents.CidrCollections = [];
                }
                else if (data["CidrCollections"] !== undefined && data["CidrCollections"]["member"] !== undefined) {
                    contents.CidrCollections = deserializeAws_restXmlCollectionSummaries(__getArrayIfSingleItem(data["CidrCollections"]["member"]), context);
                }
                if (data["NextToken"] !== undefined) {
                    contents.NextToken = __expectString(data["NextToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListCidrCollectionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListCidrLocationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListCidrLocationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CidrLocations === "") {
                    contents.CidrLocations = [];
                }
                else if (data["CidrLocations"] !== undefined && data["CidrLocations"]["member"] !== undefined) {
                    contents.CidrLocations = deserializeAws_restXmlLocationSummaries(__getArrayIfSingleItem(data["CidrLocations"]["member"]), context);
                }
                if (data["NextToken"] !== undefined) {
                    contents.NextToken = __expectString(data["NextToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListCidrLocationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchCidrCollectionException": return [3, 4];
                    case "com.amazonaws.route53#NoSuchCidrCollectionException": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListGeoLocationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListGeoLocationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.GeoLocationDetailsList === "") {
                    contents.GeoLocationDetailsList = [];
                }
                else if (data["GeoLocationDetailsList"] !== undefined &&
                    data["GeoLocationDetailsList"]["GeoLocationDetails"] !== undefined) {
                    contents.GeoLocationDetailsList = deserializeAws_restXmlGeoLocationDetailsList(__getArrayIfSingleItem(data["GeoLocationDetailsList"]["GeoLocationDetails"]), context);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextContinentCode"] !== undefined) {
                    contents.NextContinentCode = __expectString(data["NextContinentCode"]);
                }
                if (data["NextCountryCode"] !== undefined) {
                    contents.NextCountryCode = __expectString(data["NextCountryCode"]);
                }
                if (data["NextSubdivisionCode"] !== undefined) {
                    contents.NextSubdivisionCode = __expectString(data["NextSubdivisionCode"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListGeoLocationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListHealthChecksCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListHealthChecksCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.HealthChecks === "") {
                    contents.HealthChecks = [];
                }
                else if (data["HealthChecks"] !== undefined && data["HealthChecks"]["HealthCheck"] !== undefined) {
                    contents.HealthChecks = deserializeAws_restXmlHealthChecks(__getArrayIfSingleItem(data["HealthChecks"]["HealthCheck"]), context);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["Marker"] !== undefined) {
                    contents.Marker = __expectString(data["Marker"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextMarker"] !== undefined) {
                    contents.NextMarker = __expectString(data["NextMarker"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListHealthChecksCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "IncompatibleVersion": return [3, 2];
                    case "com.amazonaws.route53#IncompatibleVersion": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlIncompatibleVersionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListHostedZonesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListHostedZonesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.HostedZones === "") {
                    contents.HostedZones = [];
                }
                else if (data["HostedZones"] !== undefined && data["HostedZones"]["HostedZone"] !== undefined) {
                    contents.HostedZones = deserializeAws_restXmlHostedZones(__getArrayIfSingleItem(data["HostedZones"]["HostedZone"]), context);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["Marker"] !== undefined) {
                    contents.Marker = __expectString(data["Marker"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextMarker"] !== undefined) {
                    contents.NextMarker = __expectString(data["NextMarker"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListHostedZonesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "DelegationSetNotReusable": return [3, 2];
                    case "com.amazonaws.route53#DelegationSetNotReusable": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchDelegationSet": return [3, 6];
                    case "com.amazonaws.route53#NoSuchDelegationSet": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListHostedZonesByNameCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListHostedZonesByNameCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["DNSName"] !== undefined) {
                    contents.DNSName = __expectString(data["DNSName"]);
                }
                if (data["HostedZoneId"] !== undefined) {
                    contents.HostedZoneId = __expectString(data["HostedZoneId"]);
                }
                if (data.HostedZones === "") {
                    contents.HostedZones = [];
                }
                else if (data["HostedZones"] !== undefined && data["HostedZones"]["HostedZone"] !== undefined) {
                    contents.HostedZones = deserializeAws_restXmlHostedZones(__getArrayIfSingleItem(data["HostedZones"]["HostedZone"]), context);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextDNSName"] !== undefined) {
                    contents.NextDNSName = __expectString(data["NextDNSName"]);
                }
                if (data["NextHostedZoneId"] !== undefined) {
                    contents.NextHostedZoneId = __expectString(data["NextHostedZoneId"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListHostedZonesByNameCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidDomainName": return [3, 2];
                    case "com.amazonaws.route53#InvalidDomainName": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidDomainNameResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListHostedZonesByVPCCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListHostedZonesByVPCCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.HostedZoneSummaries === "") {
                    contents.HostedZoneSummaries = [];
                }
                else if (data["HostedZoneSummaries"] !== undefined &&
                    data["HostedZoneSummaries"]["HostedZoneSummary"] !== undefined) {
                    contents.HostedZoneSummaries = deserializeAws_restXmlHostedZoneSummaries(__getArrayIfSingleItem(data["HostedZoneSummaries"]["HostedZoneSummary"]), context);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextToken"] !== undefined) {
                    contents.NextToken = __expectString(data["NextToken"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListHostedZonesByVPCCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "InvalidPaginationToken": return [3, 4];
                    case "com.amazonaws.route53#InvalidPaginationToken": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidPaginationTokenResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListQueryLoggingConfigsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListQueryLoggingConfigsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["NextToken"] !== undefined) {
                    contents.NextToken = __expectString(data["NextToken"]);
                }
                if (data.QueryLoggingConfigs === "") {
                    contents.QueryLoggingConfigs = [];
                }
                else if (data["QueryLoggingConfigs"] !== undefined &&
                    data["QueryLoggingConfigs"]["QueryLoggingConfig"] !== undefined) {
                    contents.QueryLoggingConfigs = deserializeAws_restXmlQueryLoggingConfigs(__getArrayIfSingleItem(data["QueryLoggingConfigs"]["QueryLoggingConfig"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListQueryLoggingConfigsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "InvalidPaginationToken": return [3, 4];
                    case "com.amazonaws.route53#InvalidPaginationToken": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidPaginationTokenResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListResourceRecordSetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListResourceRecordSetsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextRecordIdentifier"] !== undefined) {
                    contents.NextRecordIdentifier = __expectString(data["NextRecordIdentifier"]);
                }
                if (data["NextRecordName"] !== undefined) {
                    contents.NextRecordName = __expectString(data["NextRecordName"]);
                }
                if (data["NextRecordType"] !== undefined) {
                    contents.NextRecordType = __expectString(data["NextRecordType"]);
                }
                if (data.ResourceRecordSets === "") {
                    contents.ResourceRecordSets = [];
                }
                else if (data["ResourceRecordSets"] !== undefined &&
                    data["ResourceRecordSets"]["ResourceRecordSet"] !== undefined) {
                    contents.ResourceRecordSets = deserializeAws_restXmlResourceRecordSets(__getArrayIfSingleItem(data["ResourceRecordSets"]["ResourceRecordSet"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListResourceRecordSetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHostedZone": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListReusableDelegationSetsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListReusableDelegationSetsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.DelegationSets === "") {
                    contents.DelegationSets = [];
                }
                else if (data["DelegationSets"] !== undefined && data["DelegationSets"]["DelegationSet"] !== undefined) {
                    contents.DelegationSets = deserializeAws_restXmlDelegationSets(__getArrayIfSingleItem(data["DelegationSets"]["DelegationSet"]), context);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["Marker"] !== undefined) {
                    contents.Marker = __expectString(data["Marker"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["NextMarker"] !== undefined) {
                    contents.NextMarker = __expectString(data["NextMarker"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListReusableDelegationSetsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTagsForResourceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["ResourceTagSet"] !== undefined) {
                    contents.ResourceTagSet = deserializeAws_restXmlResourceTagSet(data["ResourceTagSet"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHealthCheck": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                    case "PriorRequestNotComplete": return [3, 8];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 8];
                    case "ThrottlingException": return [3, 10];
                    case "com.amazonaws.route53#ThrottlingException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlThrottlingExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTagsForResourcesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTagsForResourcesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ResourceTagSets === "") {
                    contents.ResourceTagSets = [];
                }
                else if (data["ResourceTagSets"] !== undefined && data["ResourceTagSets"]["ResourceTagSet"] !== undefined) {
                    contents.ResourceTagSets = deserializeAws_restXmlResourceTagSetList(__getArrayIfSingleItem(data["ResourceTagSets"]["ResourceTagSet"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTagsForResourcesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHealthCheck": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                    case "PriorRequestNotComplete": return [3, 8];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 8];
                    case "ThrottlingException": return [3, 10];
                    case "com.amazonaws.route53#ThrottlingException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlThrottlingExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTrafficPoliciesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTrafficPoliciesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["TrafficPolicyIdMarker"] !== undefined) {
                    contents.TrafficPolicyIdMarker = __expectString(data["TrafficPolicyIdMarker"]);
                }
                if (data.TrafficPolicySummaries === "") {
                    contents.TrafficPolicySummaries = [];
                }
                else if (data["TrafficPolicySummaries"] !== undefined &&
                    data["TrafficPolicySummaries"]["TrafficPolicySummary"] !== undefined) {
                    contents.TrafficPolicySummaries = deserializeAws_restXmlTrafficPolicySummaries(__getArrayIfSingleItem(data["TrafficPolicySummaries"]["TrafficPolicySummary"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTrafficPoliciesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                }
                return [3, 4];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 5;
            case 5: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTrafficPolicyInstancesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTrafficPolicyInstancesCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HostedZoneIdMarker"] !== undefined) {
                    contents.HostedZoneIdMarker = __expectString(data["HostedZoneIdMarker"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
                    contents.TrafficPolicyInstanceNameMarker = __expectString(data["TrafficPolicyInstanceNameMarker"]);
                }
                if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
                    contents.TrafficPolicyInstanceTypeMarker = __expectString(data["TrafficPolicyInstanceTypeMarker"]);
                }
                if (data.TrafficPolicyInstances === "") {
                    contents.TrafficPolicyInstances = [];
                }
                else if (data["TrafficPolicyInstances"] !== undefined &&
                    data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
                    contents.TrafficPolicyInstances = deserializeAws_restXmlTrafficPolicyInstances(__getArrayIfSingleItem(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTrafficPolicyInstancesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchTrafficPolicyInstance": return [3, 4];
                    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
                    contents.TrafficPolicyInstanceNameMarker = __expectString(data["TrafficPolicyInstanceNameMarker"]);
                }
                if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
                    contents.TrafficPolicyInstanceTypeMarker = __expectString(data["TrafficPolicyInstanceTypeMarker"]);
                }
                if (data.TrafficPolicyInstances === "") {
                    contents.TrafficPolicyInstances = [];
                }
                else if (data["TrafficPolicyInstances"] !== undefined &&
                    data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
                    contents.TrafficPolicyInstances = deserializeAws_restXmlTrafficPolicyInstances(__getArrayIfSingleItem(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHostedZone": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 4];
                    case "NoSuchTrafficPolicyInstance": return [3, 6];
                    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HostedZoneIdMarker"] !== undefined) {
                    contents.HostedZoneIdMarker = __expectString(data["HostedZoneIdMarker"]);
                }
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
                    contents.TrafficPolicyInstanceNameMarker = __expectString(data["TrafficPolicyInstanceNameMarker"]);
                }
                if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
                    contents.TrafficPolicyInstanceTypeMarker = __expectString(data["TrafficPolicyInstanceTypeMarker"]);
                }
                if (data.TrafficPolicyInstances === "") {
                    contents.TrafficPolicyInstances = [];
                }
                else if (data["TrafficPolicyInstances"] !== undefined &&
                    data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
                    contents.TrafficPolicyInstances = deserializeAws_restXmlTrafficPolicyInstances(__getArrayIfSingleItem(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchTrafficPolicy": return [3, 4];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 4];
                    case "NoSuchTrafficPolicyInstance": return [3, 6];
                    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListTrafficPolicyVersionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListTrafficPolicyVersionsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["IsTruncated"] !== undefined) {
                    contents.IsTruncated = __parseBoolean(data["IsTruncated"]);
                }
                if (data["MaxItems"] !== undefined) {
                    contents.MaxItems = __strictParseInt32(data["MaxItems"]);
                }
                if (data.TrafficPolicies === "") {
                    contents.TrafficPolicies = [];
                }
                else if (data["TrafficPolicies"] !== undefined && data["TrafficPolicies"]["TrafficPolicy"] !== undefined) {
                    contents.TrafficPolicies = deserializeAws_restXmlTrafficPolicies(__getArrayIfSingleItem(data["TrafficPolicies"]["TrafficPolicy"]), context);
                }
                if (data["TrafficPolicyVersionMarker"] !== undefined) {
                    contents.TrafficPolicyVersionMarker = __expectString(data["TrafficPolicyVersionMarker"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListTrafficPolicyVersionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchTrafficPolicy": return [3, 4];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlListVPCAssociationAuthorizationsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlListVPCAssociationAuthorizationsCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HostedZoneId"] !== undefined) {
                    contents.HostedZoneId = __expectString(data["HostedZoneId"]);
                }
                if (data["NextToken"] !== undefined) {
                    contents.NextToken = __expectString(data["NextToken"]);
                }
                if (data.VPCs === "") {
                    contents.VPCs = [];
                }
                else if (data["VPCs"] !== undefined && data["VPCs"]["VPC"] !== undefined) {
                    contents.VPCs = deserializeAws_restXmlVPCs(__getArrayIfSingleItem(data["VPCs"]["VPC"]), context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlListVPCAssociationAuthorizationsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "InvalidPaginationToken": return [3, 4];
                    case "com.amazonaws.route53#InvalidPaginationToken": return [3, 4];
                    case "NoSuchHostedZone": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidPaginationTokenResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlTestDNSAnswerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlTestDNSAnswerCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["Nameserver"] !== undefined) {
                    contents.Nameserver = __expectString(data["Nameserver"]);
                }
                if (data["Protocol"] !== undefined) {
                    contents.Protocol = __expectString(data["Protocol"]);
                }
                if (data.RecordData === "") {
                    contents.RecordData = [];
                }
                else if (data["RecordData"] !== undefined && data["RecordData"]["RecordDataEntry"] !== undefined) {
                    contents.RecordData = deserializeAws_restXmlRecordData(__getArrayIfSingleItem(data["RecordData"]["RecordDataEntry"]), context);
                }
                if (data["RecordName"] !== undefined) {
                    contents.RecordName = __expectString(data["RecordName"]);
                }
                if (data["RecordType"] !== undefined) {
                    contents.RecordType = __expectString(data["RecordType"]);
                }
                if (data["ResponseCode"] !== undefined) {
                    contents.ResponseCode = __expectString(data["ResponseCode"]);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlTestDNSAnswerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHostedZone": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 4];
                }
                return [3, 6];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 7;
            case 7: return [2];
        }
    });
}); };
export var deserializeAws_restXmlUpdateHealthCheckCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlUpdateHealthCheckCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HealthCheck"] !== undefined) {
                    contents.HealthCheck = deserializeAws_restXmlHealthCheck(data["HealthCheck"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlUpdateHealthCheckCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "HealthCheckVersionMismatch": return [3, 2];
                    case "com.amazonaws.route53#HealthCheckVersionMismatch": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchHealthCheck": return [3, 6];
                    case "com.amazonaws.route53#NoSuchHealthCheck": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlHealthCheckVersionMismatchResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlUpdateHostedZoneCommentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlUpdateHostedZoneCommentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["HostedZone"] !== undefined) {
                    contents.HostedZone = deserializeAws_restXmlHostedZone(data["HostedZone"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlUpdateHostedZoneCommentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidInput": return [3, 2];
                    case "com.amazonaws.route53#InvalidInput": return [3, 2];
                    case "NoSuchHostedZone": return [3, 4];
                    case "com.amazonaws.route53#NoSuchHostedZone": return [3, 4];
                    case "PriorRequestNotComplete": return [3, 6];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlUpdateTrafficPolicyCommentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlUpdateTrafficPolicyCommentCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicy"] !== undefined) {
                    contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlUpdateTrafficPolicyCommentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentModification": return [3, 2];
                    case "com.amazonaws.route53#ConcurrentModification": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchTrafficPolicy": return [3, 6];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 9;
            case 9: return [2];
        }
    });
}); };
export var deserializeAws_restXmlUpdateTrafficPolicyInstanceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restXmlUpdateTrafficPolicyInstanceCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data["TrafficPolicyInstance"] !== undefined) {
                    contents.TrafficPolicyInstance = deserializeAws_restXmlTrafficPolicyInstance(data["TrafficPolicyInstance"], context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restXmlUpdateTrafficPolicyInstanceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConflictingTypes": return [3, 2];
                    case "com.amazonaws.route53#ConflictingTypes": return [3, 2];
                    case "InvalidInput": return [3, 4];
                    case "com.amazonaws.route53#InvalidInput": return [3, 4];
                    case "NoSuchTrafficPolicy": return [3, 6];
                    case "com.amazonaws.route53#NoSuchTrafficPolicy": return [3, 6];
                    case "NoSuchTrafficPolicyInstance": return [3, 8];
                    case "com.amazonaws.route53#NoSuchTrafficPolicyInstance": return [3, 8];
                    case "PriorRequestNotComplete": return [3, 10];
                    case "com.amazonaws.route53#PriorRequestNotComplete": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restXmlConflictingTypesResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restXmlInvalidInputResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody.Error,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
var map = __map;
var deserializeAws_restXmlCidrBlockInUseExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["Message"] !== undefined) {
            contents.Message = __expectString(data["Message"]);
        }
        exception = new CidrBlockInUseException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlCidrCollectionAlreadyExistsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["Message"] !== undefined) {
            contents.Message = __expectString(data["Message"]);
        }
        exception = new CidrCollectionAlreadyExistsException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlCidrCollectionInUseExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["Message"] !== undefined) {
            contents.Message = __expectString(data["Message"]);
        }
        exception = new CidrCollectionInUseException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlCidrCollectionVersionMismatchExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["Message"] !== undefined) {
            contents.Message = __expectString(data["Message"]);
        }
        exception = new CidrCollectionVersionMismatchException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlConcurrentModificationResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new ConcurrentModification(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlConflictingDomainExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new ConflictingDomainExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlConflictingTypesResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new ConflictingTypes(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlDelegationSetAlreadyCreatedResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new DelegationSetAlreadyCreated(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlDelegationSetAlreadyReusableResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new DelegationSetAlreadyReusable(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlDelegationSetInUseResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new DelegationSetInUse(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlDelegationSetNotAvailableResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new DelegationSetNotAvailable(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlDelegationSetNotReusableResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new DelegationSetNotReusable(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlDNSSECNotFoundResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new DNSSECNotFound(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHealthCheckAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HealthCheckAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHealthCheckInUseResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HealthCheckInUse(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHealthCheckVersionMismatchResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HealthCheckVersionMismatch(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHostedZoneAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HostedZoneAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHostedZoneNotEmptyResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HostedZoneNotEmpty(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHostedZoneNotFoundResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HostedZoneNotFound(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHostedZoneNotPrivateResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HostedZoneNotPrivate(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlHostedZonePartiallyDelegatedResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new HostedZonePartiallyDelegated(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlIncompatibleVersionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new IncompatibleVersion(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInsufficientCloudWatchLogsResourcePolicyResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InsufficientCloudWatchLogsResourcePolicy(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidArgumentResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidArgument(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidChangeBatchResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        if (data.messages === "") {
            contents.messages = [];
        }
        else if (data["messages"] !== undefined && data["messages"]["Message"] !== undefined) {
            contents.messages = deserializeAws_restXmlErrorMessages(__getArrayIfSingleItem(data["messages"]["Message"]), context);
        }
        exception = new InvalidChangeBatch(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidDomainNameResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidDomainName(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidInputResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidInput(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidKeySigningKeyNameResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidKeySigningKeyName(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidKeySigningKeyStatusResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidKeySigningKeyStatus(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidKMSArnResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidKMSArn(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidPaginationTokenResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidPaginationToken(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidSigningStatusResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidSigningStatus(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidTrafficPolicyDocumentResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidTrafficPolicyDocument(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlInvalidVPCIdResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new InvalidVPCId(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlKeySigningKeyAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new KeySigningKeyAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlKeySigningKeyInParentDSRecordResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new KeySigningKeyInParentDSRecord(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlKeySigningKeyInUseResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new KeySigningKeyInUse(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlKeySigningKeyWithActiveStatusNotFoundResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new KeySigningKeyWithActiveStatusNotFound(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlLastVPCAssociationResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new LastVPCAssociation(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlLimitsExceededResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new LimitsExceeded(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchChangeResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchChange(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["Message"] !== undefined) {
            contents.Message = __expectString(data["Message"]);
        }
        exception = new NoSuchCidrCollectionException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchCidrLocationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["Message"] !== undefined) {
            contents.Message = __expectString(data["Message"]);
        }
        exception = new NoSuchCidrLocationException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchCloudWatchLogsLogGroupResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchCloudWatchLogsLogGroup(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchDelegationSetResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchDelegationSet(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchGeoLocationResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchGeoLocation(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchHealthCheckResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchHealthCheck(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchHostedZoneResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchHostedZone(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchKeySigningKeyResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchKeySigningKey(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchQueryLoggingConfigResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchQueryLoggingConfig(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchTrafficPolicyResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchTrafficPolicy(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NoSuchTrafficPolicyInstance(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlNotAuthorizedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new NotAuthorizedException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlPriorRequestNotCompleteResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new PriorRequestNotComplete(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlPublicZoneVPCAssociationResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new PublicZoneVPCAssociation(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlQueryLoggingConfigAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new QueryLoggingConfigAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlThrottlingExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new ThrottlingException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyHealthChecksResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyHealthChecks(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyHostedZonesResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyHostedZones(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyKeySigningKeysResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyKeySigningKeys(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyTrafficPoliciesResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyTrafficPolicies(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyTrafficPolicyInstancesResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyTrafficPolicyInstances(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyTrafficPolicyVersionsForCurrentPolicyResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyTrafficPolicyVersionsForCurrentPolicy(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTooManyVPCAssociationAuthorizationsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TooManyVPCAssociationAuthorizations(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTrafficPolicyAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TrafficPolicyAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTrafficPolicyInstanceAlreadyExistsResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TrafficPolicyInstanceAlreadyExists(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlTrafficPolicyInUseResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new TrafficPolicyInUse(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlVPCAssociationAuthorizationNotFoundResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new VPCAssociationAuthorizationNotFound(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var deserializeAws_restXmlVPCAssociationNotFoundResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body.Error;
        if (data["message"] !== undefined) {
            contents.message = __expectString(data["message"]);
        }
        exception = new VPCAssociationNotFound(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body.Error)];
    });
}); };
var serializeAws_restXmlAlarmIdentifier = function (input, context) {
    var bodyNode = new __XmlNode("AlarmIdentifier");
    if (input.Region != null) {
        var node = __XmlNode.of("CloudWatchRegion", input.Region).withName("Region");
        bodyNode.addChildNode(node);
    }
    if (input.Name != null) {
        var node = __XmlNode.of("AlarmName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAliasTarget = function (input, context) {
    var bodyNode = new __XmlNode("AliasTarget");
    if (input.HostedZoneId != null) {
        var node = __XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.DNSName != null) {
        var node = __XmlNode.of("DNSName", input.DNSName).withName("DNSName");
        bodyNode.addChildNode(node);
    }
    if (input.EvaluateTargetHealth != null) {
        var node = __XmlNode
            .of("AliasHealthEnabled", String(input.EvaluateTargetHealth))
            .withName("EvaluateTargetHealth");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlChange = function (input, context) {
    var bodyNode = new __XmlNode("Change");
    if (input.Action != null) {
        var node = __XmlNode.of("ChangeAction", input.Action).withName("Action");
        bodyNode.addChildNode(node);
    }
    if (input.ResourceRecordSet != null) {
        var node = serializeAws_restXmlResourceRecordSet(input.ResourceRecordSet, context).withName("ResourceRecordSet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlChangeBatch = function (input, context) {
    var bodyNode = new __XmlNode("ChangeBatch");
    if (input.Comment != null) {
        var node = __XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Changes != null) {
        var nodes = serializeAws_restXmlChanges(input.Changes, context);
        var containerNode_8 = new __XmlNode("Changes");
        nodes.map(function (node) {
            containerNode_8.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_8);
    }
    return bodyNode;
};
var serializeAws_restXmlChanges = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlChange(entry, context);
        return node.withName("Change");
    });
};
var serializeAws_restXmlChildHealthCheckList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = __XmlNode.of("HealthCheckId", entry);
        return node.withName("ChildHealthCheck");
    });
};
var serializeAws_restXmlCidrCollectionChange = function (input, context) {
    var bodyNode = new __XmlNode("CidrCollectionChange");
    if (input.LocationName != null) {
        var node = __XmlNode.of("CidrLocationNameDefaultNotAllowed", input.LocationName).withName("LocationName");
        bodyNode.addChildNode(node);
    }
    if (input.Action != null) {
        var node = __XmlNode.of("CidrCollectionChangeAction", input.Action).withName("Action");
        bodyNode.addChildNode(node);
    }
    if (input.CidrList != null) {
        var nodes = serializeAws_restXmlCidrList(input.CidrList, context);
        var containerNode_9 = new __XmlNode("CidrList");
        nodes.map(function (node) {
            containerNode_9.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_9);
    }
    return bodyNode;
};
var serializeAws_restXmlCidrCollectionChanges = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlCidrCollectionChange(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlCidrList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = __XmlNode.of("Cidr", entry);
        return node.withName("Cidr");
    });
};
var serializeAws_restXmlCidrRoutingConfig = function (input, context) {
    var bodyNode = new __XmlNode("CidrRoutingConfig");
    if (input.CollectionId != null) {
        var node = __XmlNode.of("UUID", input.CollectionId).withName("CollectionId");
        bodyNode.addChildNode(node);
    }
    if (input.LocationName != null) {
        var node = __XmlNode.of("CidrLocationNameDefaultAllowed", input.LocationName).withName("LocationName");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlGeoLocation = function (input, context) {
    var bodyNode = new __XmlNode("GeoLocation");
    if (input.ContinentCode != null) {
        var node = __XmlNode.of("GeoLocationContinentCode", input.ContinentCode).withName("ContinentCode");
        bodyNode.addChildNode(node);
    }
    if (input.CountryCode != null) {
        var node = __XmlNode.of("GeoLocationCountryCode", input.CountryCode).withName("CountryCode");
        bodyNode.addChildNode(node);
    }
    if (input.SubdivisionCode != null) {
        var node = __XmlNode.of("GeoLocationSubdivisionCode", input.SubdivisionCode).withName("SubdivisionCode");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlHealthCheckConfig = function (input, context) {
    var bodyNode = new __XmlNode("HealthCheckConfig");
    if (input.IPAddress != null) {
        var node = __XmlNode.of("IPAddress", input.IPAddress).withName("IPAddress");
        bodyNode.addChildNode(node);
    }
    if (input.Port != null) {
        var node = __XmlNode.of("Port", String(input.Port)).withName("Port");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        var node = __XmlNode.of("HealthCheckType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.ResourcePath != null) {
        var node = __XmlNode.of("ResourcePath", input.ResourcePath).withName("ResourcePath");
        bodyNode.addChildNode(node);
    }
    if (input.FullyQualifiedDomainName != null) {
        var node = __XmlNode
            .of("FullyQualifiedDomainName", input.FullyQualifiedDomainName)
            .withName("FullyQualifiedDomainName");
        bodyNode.addChildNode(node);
    }
    if (input.SearchString != null) {
        var node = __XmlNode.of("SearchString", input.SearchString).withName("SearchString");
        bodyNode.addChildNode(node);
    }
    if (input.RequestInterval != null) {
        var node = __XmlNode.of("RequestInterval", String(input.RequestInterval)).withName("RequestInterval");
        bodyNode.addChildNode(node);
    }
    if (input.FailureThreshold != null) {
        var node = __XmlNode.of("FailureThreshold", String(input.FailureThreshold)).withName("FailureThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.MeasureLatency != null) {
        var node = __XmlNode.of("MeasureLatency", String(input.MeasureLatency)).withName("MeasureLatency");
        bodyNode.addChildNode(node);
    }
    if (input.Inverted != null) {
        var node = __XmlNode.of("Inverted", String(input.Inverted)).withName("Inverted");
        bodyNode.addChildNode(node);
    }
    if (input.Disabled != null) {
        var node = __XmlNode.of("Disabled", String(input.Disabled)).withName("Disabled");
        bodyNode.addChildNode(node);
    }
    if (input.HealthThreshold != null) {
        var node = __XmlNode.of("HealthThreshold", String(input.HealthThreshold)).withName("HealthThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.ChildHealthChecks != null) {
        var nodes = serializeAws_restXmlChildHealthCheckList(input.ChildHealthChecks, context);
        var containerNode_10 = new __XmlNode("ChildHealthChecks");
        nodes.map(function (node) {
            containerNode_10.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_10);
    }
    if (input.EnableSNI != null) {
        var node = __XmlNode.of("EnableSNI", String(input.EnableSNI)).withName("EnableSNI");
        bodyNode.addChildNode(node);
    }
    if (input.Regions != null) {
        var nodes = serializeAws_restXmlHealthCheckRegionList(input.Regions, context);
        var containerNode_11 = new __XmlNode("Regions");
        nodes.map(function (node) {
            containerNode_11.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_11);
    }
    if (input.AlarmIdentifier != null) {
        var node = serializeAws_restXmlAlarmIdentifier(input.AlarmIdentifier, context).withName("AlarmIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.InsufficientDataHealthStatus != null) {
        var node = __XmlNode
            .of("InsufficientDataHealthStatus", input.InsufficientDataHealthStatus)
            .withName("InsufficientDataHealthStatus");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingControlArn != null) {
        var node = __XmlNode.of("RoutingControlArn", input.RoutingControlArn).withName("RoutingControlArn");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlHealthCheckRegionList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = __XmlNode.of("HealthCheckRegion", entry);
        return node.withName("Region");
    });
};
var serializeAws_restXmlHostedZoneConfig = function (input, context) {
    var bodyNode = new __XmlNode("HostedZoneConfig");
    if (input.Comment != null) {
        var node = __XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.PrivateZone != null) {
        var node = __XmlNode.of("IsPrivateZone", String(input.PrivateZone)).withName("PrivateZone");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlResettableElementNameList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = __XmlNode.of("ResettableElementName", entry);
        return node.withName("ResettableElementName");
    });
};
var serializeAws_restXmlResourceRecord = function (input, context) {
    var bodyNode = new __XmlNode("ResourceRecord");
    if (input.Value != null) {
        var node = __XmlNode.of("RData", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlResourceRecords = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlResourceRecord(entry, context);
        return node.withName("ResourceRecord");
    });
};
var serializeAws_restXmlResourceRecordSet = function (input, context) {
    var bodyNode = new __XmlNode("ResourceRecordSet");
    if (input.Name != null) {
        var node = __XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        var node = __XmlNode.of("RRType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.SetIdentifier != null) {
        var node = __XmlNode.of("ResourceRecordSetIdentifier", input.SetIdentifier).withName("SetIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.Weight != null) {
        var node = __XmlNode.of("ResourceRecordSetWeight", String(input.Weight)).withName("Weight");
        bodyNode.addChildNode(node);
    }
    if (input.Region != null) {
        var node = __XmlNode.of("ResourceRecordSetRegion", input.Region).withName("Region");
        bodyNode.addChildNode(node);
    }
    if (input.GeoLocation != null) {
        var node = serializeAws_restXmlGeoLocation(input.GeoLocation, context).withName("GeoLocation");
        bodyNode.addChildNode(node);
    }
    if (input.Failover != null) {
        var node = __XmlNode.of("ResourceRecordSetFailover", input.Failover).withName("Failover");
        bodyNode.addChildNode(node);
    }
    if (input.MultiValueAnswer != null) {
        var node = __XmlNode
            .of("ResourceRecordSetMultiValueAnswer", String(input.MultiValueAnswer))
            .withName("MultiValueAnswer");
        bodyNode.addChildNode(node);
    }
    if (input.TTL != null) {
        var node = __XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.ResourceRecords != null) {
        var nodes = serializeAws_restXmlResourceRecords(input.ResourceRecords, context);
        var containerNode_12 = new __XmlNode("ResourceRecords");
        nodes.map(function (node) {
            containerNode_12.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_12);
    }
    if (input.AliasTarget != null) {
        var node = serializeAws_restXmlAliasTarget(input.AliasTarget, context).withName("AliasTarget");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckId != null) {
        var node = __XmlNode.of("HealthCheckId", input.HealthCheckId).withName("HealthCheckId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyInstanceId != null) {
        var node = __XmlNode
            .of("TrafficPolicyInstanceId", input.TrafficPolicyInstanceId)
            .withName("TrafficPolicyInstanceId");
        bodyNode.addChildNode(node);
    }
    if (input.CidrRoutingConfig != null) {
        var node = serializeAws_restXmlCidrRoutingConfig(input.CidrRoutingConfig, context).withName("CidrRoutingConfig");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTag = function (input, context) {
    var bodyNode = new __XmlNode("Tag");
    if (input.Key != null) {
        var node = __XmlNode.of("TagKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        var node = __XmlNode.of("TagValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTagKeyList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = __XmlNode.of("TagKey", entry);
        return node.withName("Key");
    });
};
var serializeAws_restXmlTagList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = serializeAws_restXmlTag(entry, context);
        return node.withName("Tag");
    });
};
var serializeAws_restXmlTagResourceIdList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        var node = __XmlNode.of("TagResourceId", entry);
        return node.withName("ResourceId");
    });
};
var serializeAws_restXmlVPC = function (input, context) {
    var bodyNode = new __XmlNode("VPC");
    if (input.VPCRegion != null) {
        var node = __XmlNode.of("VPCRegion", input.VPCRegion).withName("VPCRegion");
        bodyNode.addChildNode(node);
    }
    if (input.VPCId != null) {
        var node = __XmlNode.of("VPCId", input.VPCId).withName("VPCId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var deserializeAws_restXmlAccountLimit = function (output, context) {
    var contents = {
        Type: undefined,
        Value: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __strictParseLong(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlAlarmIdentifier = function (output, context) {
    var contents = {
        Region: undefined,
        Name: undefined,
    };
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
var deserializeAws_restXmlAliasTarget = function (output, context) {
    var contents = {
        HostedZoneId: undefined,
        DNSName: undefined,
        EvaluateTargetHealth: undefined,
    };
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    if (output["DNSName"] !== undefined) {
        contents.DNSName = __expectString(output["DNSName"]);
    }
    if (output["EvaluateTargetHealth"] !== undefined) {
        contents.EvaluateTargetHealth = __parseBoolean(output["EvaluateTargetHealth"]);
    }
    return contents;
};
var deserializeAws_restXmlChangeInfo = function (output, context) {
    var contents = {
        Id: undefined,
        Status: undefined,
        SubmittedAt: undefined,
        Comment: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SubmittedAt"] !== undefined) {
        contents.SubmittedAt = __expectNonNull(__parseRfc3339DateTime(output["SubmittedAt"]));
    }
    if (output["Comment"] !== undefined) {
        contents.Comment = __expectString(output["Comment"]);
    }
    return contents;
};
var deserializeAws_restXmlCheckerIpRanges = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __expectString(entry);
    });
};
var deserializeAws_restXmlChildHealthCheckList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __expectString(entry);
    });
};
var deserializeAws_restXmlCidrBlockSummaries = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlCidrBlockSummary(entry, context);
    });
};
var deserializeAws_restXmlCidrBlockSummary = function (output, context) {
    var contents = {
        CidrBlock: undefined,
        LocationName: undefined,
    };
    if (output["CidrBlock"] !== undefined) {
        contents.CidrBlock = __expectString(output["CidrBlock"]);
    }
    if (output["LocationName"] !== undefined) {
        contents.LocationName = __expectString(output["LocationName"]);
    }
    return contents;
};
var deserializeAws_restXmlCidrCollection = function (output, context) {
    var contents = {
        Arn: undefined,
        Id: undefined,
        Name: undefined,
        Version: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __strictParseLong(output["Version"]);
    }
    return contents;
};
var deserializeAws_restXmlCidrRoutingConfig = function (output, context) {
    var contents = {
        CollectionId: undefined,
        LocationName: undefined,
    };
    if (output["CollectionId"] !== undefined) {
        contents.CollectionId = __expectString(output["CollectionId"]);
    }
    if (output["LocationName"] !== undefined) {
        contents.LocationName = __expectString(output["LocationName"]);
    }
    return contents;
};
var deserializeAws_restXmlCloudWatchAlarmConfiguration = function (output, context) {
    var contents = {
        EvaluationPeriods: undefined,
        Threshold: undefined,
        ComparisonOperator: undefined,
        Period: undefined,
        MetricName: undefined,
        Namespace: undefined,
        Statistic: undefined,
        Dimensions: undefined,
    };
    if (output["EvaluationPeriods"] !== undefined) {
        contents.EvaluationPeriods = __strictParseInt32(output["EvaluationPeriods"]);
    }
    if (output["Threshold"] !== undefined) {
        contents.Threshold = __strictParseFloat(output["Threshold"]);
    }
    if (output["ComparisonOperator"] !== undefined) {
        contents.ComparisonOperator = __expectString(output["ComparisonOperator"]);
    }
    if (output["Period"] !== undefined) {
        contents.Period = __strictParseInt32(output["Period"]);
    }
    if (output["MetricName"] !== undefined) {
        contents.MetricName = __expectString(output["MetricName"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = __expectString(output["Namespace"]);
    }
    if (output["Statistic"] !== undefined) {
        contents.Statistic = __expectString(output["Statistic"]);
    }
    if (output.Dimensions === "") {
        contents.Dimensions = [];
    }
    else if (output["Dimensions"] !== undefined && output["Dimensions"]["Dimension"] !== undefined) {
        contents.Dimensions = deserializeAws_restXmlDimensionList(__getArrayIfSingleItem(output["Dimensions"]["Dimension"]), context);
    }
    return contents;
};
var deserializeAws_restXmlCollectionSummaries = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlCollectionSummary(entry, context);
    });
};
var deserializeAws_restXmlCollectionSummary = function (output, context) {
    var contents = {
        Arn: undefined,
        Id: undefined,
        Name: undefined,
        Version: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __strictParseLong(output["Version"]);
    }
    return contents;
};
var deserializeAws_restXmlDelegationSet = function (output, context) {
    var contents = {
        Id: undefined,
        CallerReference: undefined,
        NameServers: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = __expectString(output["CallerReference"]);
    }
    if (output.NameServers === "") {
        contents.NameServers = [];
    }
    else if (output["NameServers"] !== undefined && output["NameServers"]["NameServer"] !== undefined) {
        contents.NameServers = deserializeAws_restXmlDelegationSetNameServers(__getArrayIfSingleItem(output["NameServers"]["NameServer"]), context);
    }
    return contents;
};
var deserializeAws_restXmlDelegationSetNameServers = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __expectString(entry);
    });
};
var deserializeAws_restXmlDelegationSets = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlDelegationSet(entry, context);
    });
};
var deserializeAws_restXmlDimension = function (output, context) {
    var contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlDimensionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlDimension(entry, context);
    });
};
var deserializeAws_restXmlDNSSECStatus = function (output, context) {
    var contents = {
        ServeSignature: undefined,
        StatusMessage: undefined,
    };
    if (output["ServeSignature"] !== undefined) {
        contents.ServeSignature = __expectString(output["ServeSignature"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["StatusMessage"]);
    }
    return contents;
};
var deserializeAws_restXmlErrorMessages = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __expectString(entry);
    });
};
var deserializeAws_restXmlGeoLocation = function (output, context) {
    var contents = {
        ContinentCode: undefined,
        CountryCode: undefined,
        SubdivisionCode: undefined,
    };
    if (output["ContinentCode"] !== undefined) {
        contents.ContinentCode = __expectString(output["ContinentCode"]);
    }
    if (output["CountryCode"] !== undefined) {
        contents.CountryCode = __expectString(output["CountryCode"]);
    }
    if (output["SubdivisionCode"] !== undefined) {
        contents.SubdivisionCode = __expectString(output["SubdivisionCode"]);
    }
    return contents;
};
var deserializeAws_restXmlGeoLocationDetails = function (output, context) {
    var contents = {
        ContinentCode: undefined,
        ContinentName: undefined,
        CountryCode: undefined,
        CountryName: undefined,
        SubdivisionCode: undefined,
        SubdivisionName: undefined,
    };
    if (output["ContinentCode"] !== undefined) {
        contents.ContinentCode = __expectString(output["ContinentCode"]);
    }
    if (output["ContinentName"] !== undefined) {
        contents.ContinentName = __expectString(output["ContinentName"]);
    }
    if (output["CountryCode"] !== undefined) {
        contents.CountryCode = __expectString(output["CountryCode"]);
    }
    if (output["CountryName"] !== undefined) {
        contents.CountryName = __expectString(output["CountryName"]);
    }
    if (output["SubdivisionCode"] !== undefined) {
        contents.SubdivisionCode = __expectString(output["SubdivisionCode"]);
    }
    if (output["SubdivisionName"] !== undefined) {
        contents.SubdivisionName = __expectString(output["SubdivisionName"]);
    }
    return contents;
};
var deserializeAws_restXmlGeoLocationDetailsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlGeoLocationDetails(entry, context);
    });
};
var deserializeAws_restXmlHealthCheck = function (output, context) {
    var contents = {
        Id: undefined,
        CallerReference: undefined,
        LinkedService: undefined,
        HealthCheckConfig: undefined,
        HealthCheckVersion: undefined,
        CloudWatchAlarmConfiguration: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = __expectString(output["CallerReference"]);
    }
    if (output["LinkedService"] !== undefined) {
        contents.LinkedService = deserializeAws_restXmlLinkedService(output["LinkedService"], context);
    }
    if (output["HealthCheckConfig"] !== undefined) {
        contents.HealthCheckConfig = deserializeAws_restXmlHealthCheckConfig(output["HealthCheckConfig"], context);
    }
    if (output["HealthCheckVersion"] !== undefined) {
        contents.HealthCheckVersion = __strictParseLong(output["HealthCheckVersion"]);
    }
    if (output["CloudWatchAlarmConfiguration"] !== undefined) {
        contents.CloudWatchAlarmConfiguration = deserializeAws_restXmlCloudWatchAlarmConfiguration(output["CloudWatchAlarmConfiguration"], context);
    }
    return contents;
};
var deserializeAws_restXmlHealthCheckConfig = function (output, context) {
    var contents = {
        IPAddress: undefined,
        Port: undefined,
        Type: undefined,
        ResourcePath: undefined,
        FullyQualifiedDomainName: undefined,
        SearchString: undefined,
        RequestInterval: undefined,
        FailureThreshold: undefined,
        MeasureLatency: undefined,
        Inverted: undefined,
        Disabled: undefined,
        HealthThreshold: undefined,
        ChildHealthChecks: undefined,
        EnableSNI: undefined,
        Regions: undefined,
        AlarmIdentifier: undefined,
        InsufficientDataHealthStatus: undefined,
        RoutingControlArn: undefined,
    };
    if (output["IPAddress"] !== undefined) {
        contents.IPAddress = __expectString(output["IPAddress"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["ResourcePath"] !== undefined) {
        contents.ResourcePath = __expectString(output["ResourcePath"]);
    }
    if (output["FullyQualifiedDomainName"] !== undefined) {
        contents.FullyQualifiedDomainName = __expectString(output["FullyQualifiedDomainName"]);
    }
    if (output["SearchString"] !== undefined) {
        contents.SearchString = __expectString(output["SearchString"]);
    }
    if (output["RequestInterval"] !== undefined) {
        contents.RequestInterval = __strictParseInt32(output["RequestInterval"]);
    }
    if (output["FailureThreshold"] !== undefined) {
        contents.FailureThreshold = __strictParseInt32(output["FailureThreshold"]);
    }
    if (output["MeasureLatency"] !== undefined) {
        contents.MeasureLatency = __parseBoolean(output["MeasureLatency"]);
    }
    if (output["Inverted"] !== undefined) {
        contents.Inverted = __parseBoolean(output["Inverted"]);
    }
    if (output["Disabled"] !== undefined) {
        contents.Disabled = __parseBoolean(output["Disabled"]);
    }
    if (output["HealthThreshold"] !== undefined) {
        contents.HealthThreshold = __strictParseInt32(output["HealthThreshold"]);
    }
    if (output.ChildHealthChecks === "") {
        contents.ChildHealthChecks = [];
    }
    else if (output["ChildHealthChecks"] !== undefined &&
        output["ChildHealthChecks"]["ChildHealthCheck"] !== undefined) {
        contents.ChildHealthChecks = deserializeAws_restXmlChildHealthCheckList(__getArrayIfSingleItem(output["ChildHealthChecks"]["ChildHealthCheck"]), context);
    }
    if (output["EnableSNI"] !== undefined) {
        contents.EnableSNI = __parseBoolean(output["EnableSNI"]);
    }
    if (output.Regions === "") {
        contents.Regions = [];
    }
    else if (output["Regions"] !== undefined && output["Regions"]["Region"] !== undefined) {
        contents.Regions = deserializeAws_restXmlHealthCheckRegionList(__getArrayIfSingleItem(output["Regions"]["Region"]), context);
    }
    if (output["AlarmIdentifier"] !== undefined) {
        contents.AlarmIdentifier = deserializeAws_restXmlAlarmIdentifier(output["AlarmIdentifier"], context);
    }
    if (output["InsufficientDataHealthStatus"] !== undefined) {
        contents.InsufficientDataHealthStatus = __expectString(output["InsufficientDataHealthStatus"]);
    }
    if (output["RoutingControlArn"] !== undefined) {
        contents.RoutingControlArn = __expectString(output["RoutingControlArn"]);
    }
    return contents;
};
var deserializeAws_restXmlHealthCheckObservation = function (output, context) {
    var contents = {
        Region: undefined,
        IPAddress: undefined,
        StatusReport: undefined,
    };
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["IPAddress"] !== undefined) {
        contents.IPAddress = __expectString(output["IPAddress"]);
    }
    if (output["StatusReport"] !== undefined) {
        contents.StatusReport = deserializeAws_restXmlStatusReport(output["StatusReport"], context);
    }
    return contents;
};
var deserializeAws_restXmlHealthCheckObservations = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlHealthCheckObservation(entry, context);
    });
};
var deserializeAws_restXmlHealthCheckRegionList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __expectString(entry);
    });
};
var deserializeAws_restXmlHealthChecks = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlHealthCheck(entry, context);
    });
};
var deserializeAws_restXmlHostedZone = function (output, context) {
    var contents = {
        Id: undefined,
        Name: undefined,
        CallerReference: undefined,
        Config: undefined,
        ResourceRecordSetCount: undefined,
        LinkedService: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = __expectString(output["CallerReference"]);
    }
    if (output["Config"] !== undefined) {
        contents.Config = deserializeAws_restXmlHostedZoneConfig(output["Config"], context);
    }
    if (output["ResourceRecordSetCount"] !== undefined) {
        contents.ResourceRecordSetCount = __strictParseLong(output["ResourceRecordSetCount"]);
    }
    if (output["LinkedService"] !== undefined) {
        contents.LinkedService = deserializeAws_restXmlLinkedService(output["LinkedService"], context);
    }
    return contents;
};
var deserializeAws_restXmlHostedZoneConfig = function (output, context) {
    var contents = {
        Comment: undefined,
        PrivateZone: undefined,
    };
    if (output["Comment"] !== undefined) {
        contents.Comment = __expectString(output["Comment"]);
    }
    if (output["PrivateZone"] !== undefined) {
        contents.PrivateZone = __parseBoolean(output["PrivateZone"]);
    }
    return contents;
};
var deserializeAws_restXmlHostedZoneLimit = function (output, context) {
    var contents = {
        Type: undefined,
        Value: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __strictParseLong(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlHostedZoneOwner = function (output, context) {
    var contents = {
        OwningAccount: undefined,
        OwningService: undefined,
    };
    if (output["OwningAccount"] !== undefined) {
        contents.OwningAccount = __expectString(output["OwningAccount"]);
    }
    if (output["OwningService"] !== undefined) {
        contents.OwningService = __expectString(output["OwningService"]);
    }
    return contents;
};
var deserializeAws_restXmlHostedZones = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlHostedZone(entry, context);
    });
};
var deserializeAws_restXmlHostedZoneSummaries = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlHostedZoneSummary(entry, context);
    });
};
var deserializeAws_restXmlHostedZoneSummary = function (output, context) {
    var contents = {
        HostedZoneId: undefined,
        Name: undefined,
        Owner: undefined,
    };
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlHostedZoneOwner(output["Owner"], context);
    }
    return contents;
};
var deserializeAws_restXmlKeySigningKey = function (output, context) {
    var contents = {
        Name: undefined,
        KmsArn: undefined,
        Flag: undefined,
        SigningAlgorithmMnemonic: undefined,
        SigningAlgorithmType: undefined,
        DigestAlgorithmMnemonic: undefined,
        DigestAlgorithmType: undefined,
        KeyTag: undefined,
        DigestValue: undefined,
        PublicKey: undefined,
        DSRecord: undefined,
        DNSKEYRecord: undefined,
        Status: undefined,
        StatusMessage: undefined,
        CreatedDate: undefined,
        LastModifiedDate: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["KmsArn"] !== undefined) {
        contents.KmsArn = __expectString(output["KmsArn"]);
    }
    if (output["Flag"] !== undefined) {
        contents.Flag = __strictParseInt32(output["Flag"]);
    }
    if (output["SigningAlgorithmMnemonic"] !== undefined) {
        contents.SigningAlgorithmMnemonic = __expectString(output["SigningAlgorithmMnemonic"]);
    }
    if (output["SigningAlgorithmType"] !== undefined) {
        contents.SigningAlgorithmType = __strictParseInt32(output["SigningAlgorithmType"]);
    }
    if (output["DigestAlgorithmMnemonic"] !== undefined) {
        contents.DigestAlgorithmMnemonic = __expectString(output["DigestAlgorithmMnemonic"]);
    }
    if (output["DigestAlgorithmType"] !== undefined) {
        contents.DigestAlgorithmType = __strictParseInt32(output["DigestAlgorithmType"]);
    }
    if (output["KeyTag"] !== undefined) {
        contents.KeyTag = __strictParseInt32(output["KeyTag"]);
    }
    if (output["DigestValue"] !== undefined) {
        contents.DigestValue = __expectString(output["DigestValue"]);
    }
    if (output["PublicKey"] !== undefined) {
        contents.PublicKey = __expectString(output["PublicKey"]);
    }
    if (output["DSRecord"] !== undefined) {
        contents.DSRecord = __expectString(output["DSRecord"]);
    }
    if (output["DNSKEYRecord"] !== undefined) {
        contents.DNSKEYRecord = __expectString(output["DNSKEYRecord"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = __expectString(output["StatusMessage"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["LastModifiedDate"] !== undefined) {
        contents.LastModifiedDate = __expectNonNull(__parseRfc3339DateTime(output["LastModifiedDate"]));
    }
    return contents;
};
var deserializeAws_restXmlKeySigningKeys = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlKeySigningKey(entry, context);
    });
};
var deserializeAws_restXmlLinkedService = function (output, context) {
    var contents = {
        ServicePrincipal: undefined,
        Description: undefined,
    };
    if (output["ServicePrincipal"] !== undefined) {
        contents.ServicePrincipal = __expectString(output["ServicePrincipal"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    return contents;
};
var deserializeAws_restXmlLocationSummaries = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlLocationSummary(entry, context);
    });
};
var deserializeAws_restXmlLocationSummary = function (output, context) {
    var contents = {
        LocationName: undefined,
    };
    if (output["LocationName"] !== undefined) {
        contents.LocationName = __expectString(output["LocationName"]);
    }
    return contents;
};
var deserializeAws_restXmlQueryLoggingConfig = function (output, context) {
    var contents = {
        Id: undefined,
        HostedZoneId: undefined,
        CloudWatchLogsLogGroupArn: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    if (output["CloudWatchLogsLogGroupArn"] !== undefined) {
        contents.CloudWatchLogsLogGroupArn = __expectString(output["CloudWatchLogsLogGroupArn"]);
    }
    return contents;
};
var deserializeAws_restXmlQueryLoggingConfigs = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlQueryLoggingConfig(entry, context);
    });
};
var deserializeAws_restXmlRecordData = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __expectString(entry);
    });
};
var deserializeAws_restXmlResourceRecord = function (output, context) {
    var contents = {
        Value: undefined,
    };
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlResourceRecords = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlResourceRecord(entry, context);
    });
};
var deserializeAws_restXmlResourceRecordSet = function (output, context) {
    var contents = {
        Name: undefined,
        Type: undefined,
        SetIdentifier: undefined,
        Weight: undefined,
        Region: undefined,
        GeoLocation: undefined,
        Failover: undefined,
        MultiValueAnswer: undefined,
        TTL: undefined,
        ResourceRecords: undefined,
        AliasTarget: undefined,
        HealthCheckId: undefined,
        TrafficPolicyInstanceId: undefined,
        CidrRoutingConfig: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["SetIdentifier"] !== undefined) {
        contents.SetIdentifier = __expectString(output["SetIdentifier"]);
    }
    if (output["Weight"] !== undefined) {
        contents.Weight = __strictParseLong(output["Weight"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["GeoLocation"] !== undefined) {
        contents.GeoLocation = deserializeAws_restXmlGeoLocation(output["GeoLocation"], context);
    }
    if (output["Failover"] !== undefined) {
        contents.Failover = __expectString(output["Failover"]);
    }
    if (output["MultiValueAnswer"] !== undefined) {
        contents.MultiValueAnswer = __parseBoolean(output["MultiValueAnswer"]);
    }
    if (output["TTL"] !== undefined) {
        contents.TTL = __strictParseLong(output["TTL"]);
    }
    if (output.ResourceRecords === "") {
        contents.ResourceRecords = [];
    }
    else if (output["ResourceRecords"] !== undefined && output["ResourceRecords"]["ResourceRecord"] !== undefined) {
        contents.ResourceRecords = deserializeAws_restXmlResourceRecords(__getArrayIfSingleItem(output["ResourceRecords"]["ResourceRecord"]), context);
    }
    if (output["AliasTarget"] !== undefined) {
        contents.AliasTarget = deserializeAws_restXmlAliasTarget(output["AliasTarget"], context);
    }
    if (output["HealthCheckId"] !== undefined) {
        contents.HealthCheckId = __expectString(output["HealthCheckId"]);
    }
    if (output["TrafficPolicyInstanceId"] !== undefined) {
        contents.TrafficPolicyInstanceId = __expectString(output["TrafficPolicyInstanceId"]);
    }
    if (output["CidrRoutingConfig"] !== undefined) {
        contents.CidrRoutingConfig = deserializeAws_restXmlCidrRoutingConfig(output["CidrRoutingConfig"], context);
    }
    return contents;
};
var deserializeAws_restXmlResourceRecordSets = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlResourceRecordSet(entry, context);
    });
};
var deserializeAws_restXmlResourceTagSet = function (output, context) {
    var contents = {
        ResourceType: undefined,
        ResourceId: undefined,
        Tags: undefined,
    };
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["ResourceId"] !== undefined) {
        contents.ResourceId = __expectString(output["ResourceId"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagList(__getArrayIfSingleItem(output["Tags"]["Tag"]), context);
    }
    return contents;
};
var deserializeAws_restXmlResourceTagSetList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlResourceTagSet(entry, context);
    });
};
var deserializeAws_restXmlReusableDelegationSetLimit = function (output, context) {
    var contents = {
        Type: undefined,
        Value: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __strictParseLong(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlStatusReport = function (output, context) {
    var contents = {
        Status: undefined,
        CheckedTime: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["CheckedTime"] !== undefined) {
        contents.CheckedTime = __expectNonNull(__parseRfc3339DateTime(output["CheckedTime"]));
    }
    return contents;
};
var deserializeAws_restXmlTag = function (output, context) {
    var contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = __expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
var deserializeAws_restXmlTagList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTag(entry, context);
    });
};
var deserializeAws_restXmlTrafficPolicies = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTrafficPolicy(entry, context);
    });
};
var deserializeAws_restXmlTrafficPolicy = function (output, context) {
    var contents = {
        Id: undefined,
        Version: undefined,
        Name: undefined,
        Type: undefined,
        Document: undefined,
        Comment: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __strictParseInt32(output["Version"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Document"] !== undefined) {
        contents.Document = __expectString(output["Document"]);
    }
    if (output["Comment"] !== undefined) {
        contents.Comment = __expectString(output["Comment"]);
    }
    return contents;
};
var deserializeAws_restXmlTrafficPolicyInstance = function (output, context) {
    var contents = {
        Id: undefined,
        HostedZoneId: undefined,
        Name: undefined,
        TTL: undefined,
        State: undefined,
        Message: undefined,
        TrafficPolicyId: undefined,
        TrafficPolicyVersion: undefined,
        TrafficPolicyType: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["TTL"] !== undefined) {
        contents.TTL = __strictParseLong(output["TTL"]);
    }
    if (output["State"] !== undefined) {
        contents.State = __expectString(output["State"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    if (output["TrafficPolicyId"] !== undefined) {
        contents.TrafficPolicyId = __expectString(output["TrafficPolicyId"]);
    }
    if (output["TrafficPolicyVersion"] !== undefined) {
        contents.TrafficPolicyVersion = __strictParseInt32(output["TrafficPolicyVersion"]);
    }
    if (output["TrafficPolicyType"] !== undefined) {
        contents.TrafficPolicyType = __expectString(output["TrafficPolicyType"]);
    }
    return contents;
};
var deserializeAws_restXmlTrafficPolicyInstances = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTrafficPolicyInstance(entry, context);
    });
};
var deserializeAws_restXmlTrafficPolicySummaries = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlTrafficPolicySummary(entry, context);
    });
};
var deserializeAws_restXmlTrafficPolicySummary = function (output, context) {
    var contents = {
        Id: undefined,
        Name: undefined,
        Type: undefined,
        LatestVersion: undefined,
        TrafficPolicyCount: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["LatestVersion"] !== undefined) {
        contents.LatestVersion = __strictParseInt32(output["LatestVersion"]);
    }
    if (output["TrafficPolicyCount"] !== undefined) {
        contents.TrafficPolicyCount = __strictParseInt32(output["TrafficPolicyCount"]);
    }
    return contents;
};
var deserializeAws_restXmlVPC = function (output, context) {
    var contents = {
        VPCRegion: undefined,
        VPCId: undefined,
    };
    if (output["VPCRegion"] !== undefined) {
        contents.VPCRegion = __expectString(output["VPCRegion"]);
    }
    if (output["VPCId"] !== undefined) {
        contents.VPCId = __expectString(output["VPCId"]);
    }
    return contents;
};
var deserializeAws_restXmlVPCs = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return deserializeAws_restXmlVPC(entry, context);
    });
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var isSerializableHeaderValue = function (value) {
    return value !== undefined &&
        value !== null &&
        value !== "" &&
        (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
        (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            var parsedObj = xmlParse(encoded, {
                attributeNamePrefix: "",
                ignoreAttributes: false,
                parseNodeValue: false,
                trimValues: false,
                tagValueProcessor: function (val) { return (val.trim() === "" && val.includes("\n") ? "" : decodeHTML(val)); },
            });
            var textNodeName = "#text";
            var key = Object.keys(parsedObj)[0];
            var parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return __getValueFromTextNode(parsedObjToReturn);
        }
        return {};
    });
};
var loadRestXmlErrorCode = function (output, data) {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
