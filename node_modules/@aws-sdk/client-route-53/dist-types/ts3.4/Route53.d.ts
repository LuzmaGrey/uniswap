import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { ActivateKeySigningKeyCommandInput, ActivateKeySigningKeyCommandOutput } from "./commands/ActivateKeySigningKeyCommand";
import { AssociateVPCWithHostedZoneCommandInput, AssociateVPCWithHostedZoneCommandOutput } from "./commands/AssociateVPCWithHostedZoneCommand";
import { ChangeCidrCollectionCommandInput, ChangeCidrCollectionCommandOutput } from "./commands/ChangeCidrCollectionCommand";
import { ChangeResourceRecordSetsCommandInput, ChangeResourceRecordSetsCommandOutput } from "./commands/ChangeResourceRecordSetsCommand";
import { ChangeTagsForResourceCommandInput, ChangeTagsForResourceCommandOutput } from "./commands/ChangeTagsForResourceCommand";
import { CreateCidrCollectionCommandInput, CreateCidrCollectionCommandOutput } from "./commands/CreateCidrCollectionCommand";
import { CreateHealthCheckCommandInput, CreateHealthCheckCommandOutput } from "./commands/CreateHealthCheckCommand";
import { CreateHostedZoneCommandInput, CreateHostedZoneCommandOutput } from "./commands/CreateHostedZoneCommand";
import { CreateKeySigningKeyCommandInput, CreateKeySigningKeyCommandOutput } from "./commands/CreateKeySigningKeyCommand";
import { CreateQueryLoggingConfigCommandInput, CreateQueryLoggingConfigCommandOutput } from "./commands/CreateQueryLoggingConfigCommand";
import { CreateReusableDelegationSetCommandInput, CreateReusableDelegationSetCommandOutput } from "./commands/CreateReusableDelegationSetCommand";
import { CreateTrafficPolicyCommandInput, CreateTrafficPolicyCommandOutput } from "./commands/CreateTrafficPolicyCommand";
import { CreateTrafficPolicyInstanceCommandInput, CreateTrafficPolicyInstanceCommandOutput } from "./commands/CreateTrafficPolicyInstanceCommand";
import { CreateTrafficPolicyVersionCommandInput, CreateTrafficPolicyVersionCommandOutput } from "./commands/CreateTrafficPolicyVersionCommand";
import { CreateVPCAssociationAuthorizationCommandInput, CreateVPCAssociationAuthorizationCommandOutput } from "./commands/CreateVPCAssociationAuthorizationCommand";
import { DeactivateKeySigningKeyCommandInput, DeactivateKeySigningKeyCommandOutput } from "./commands/DeactivateKeySigningKeyCommand";
import { DeleteCidrCollectionCommandInput, DeleteCidrCollectionCommandOutput } from "./commands/DeleteCidrCollectionCommand";
import { DeleteHealthCheckCommandInput, DeleteHealthCheckCommandOutput } from "./commands/DeleteHealthCheckCommand";
import { DeleteHostedZoneCommandInput, DeleteHostedZoneCommandOutput } from "./commands/DeleteHostedZoneCommand";
import { DeleteKeySigningKeyCommandInput, DeleteKeySigningKeyCommandOutput } from "./commands/DeleteKeySigningKeyCommand";
import { DeleteQueryLoggingConfigCommandInput, DeleteQueryLoggingConfigCommandOutput } from "./commands/DeleteQueryLoggingConfigCommand";
import { DeleteReusableDelegationSetCommandInput, DeleteReusableDelegationSetCommandOutput } from "./commands/DeleteReusableDelegationSetCommand";
import { DeleteTrafficPolicyCommandInput, DeleteTrafficPolicyCommandOutput } from "./commands/DeleteTrafficPolicyCommand";
import { DeleteTrafficPolicyInstanceCommandInput, DeleteTrafficPolicyInstanceCommandOutput } from "./commands/DeleteTrafficPolicyInstanceCommand";
import { DeleteVPCAssociationAuthorizationCommandInput, DeleteVPCAssociationAuthorizationCommandOutput } from "./commands/DeleteVPCAssociationAuthorizationCommand";
import { DisableHostedZoneDNSSECCommandInput, DisableHostedZoneDNSSECCommandOutput } from "./commands/DisableHostedZoneDNSSECCommand";
import { DisassociateVPCFromHostedZoneCommandInput, DisassociateVPCFromHostedZoneCommandOutput } from "./commands/DisassociateVPCFromHostedZoneCommand";
import { EnableHostedZoneDNSSECCommandInput, EnableHostedZoneDNSSECCommandOutput } from "./commands/EnableHostedZoneDNSSECCommand";
import { GetAccountLimitCommandInput, GetAccountLimitCommandOutput } from "./commands/GetAccountLimitCommand";
import { GetChangeCommandInput, GetChangeCommandOutput } from "./commands/GetChangeCommand";
import { GetCheckerIpRangesCommandInput, GetCheckerIpRangesCommandOutput } from "./commands/GetCheckerIpRangesCommand";
import { GetDNSSECCommandInput, GetDNSSECCommandOutput } from "./commands/GetDNSSECCommand";
import { GetGeoLocationCommandInput, GetGeoLocationCommandOutput } from "./commands/GetGeoLocationCommand";
import { GetHealthCheckCommandInput, GetHealthCheckCommandOutput } from "./commands/GetHealthCheckCommand";
import { GetHealthCheckCountCommandInput, GetHealthCheckCountCommandOutput } from "./commands/GetHealthCheckCountCommand";
import { GetHealthCheckLastFailureReasonCommandInput, GetHealthCheckLastFailureReasonCommandOutput } from "./commands/GetHealthCheckLastFailureReasonCommand";
import { GetHealthCheckStatusCommandInput, GetHealthCheckStatusCommandOutput } from "./commands/GetHealthCheckStatusCommand";
import { GetHostedZoneCommandInput, GetHostedZoneCommandOutput } from "./commands/GetHostedZoneCommand";
import { GetHostedZoneCountCommandInput, GetHostedZoneCountCommandOutput } from "./commands/GetHostedZoneCountCommand";
import { GetHostedZoneLimitCommandInput, GetHostedZoneLimitCommandOutput } from "./commands/GetHostedZoneLimitCommand";
import { GetQueryLoggingConfigCommandInput, GetQueryLoggingConfigCommandOutput } from "./commands/GetQueryLoggingConfigCommand";
import { GetReusableDelegationSetCommandInput, GetReusableDelegationSetCommandOutput } from "./commands/GetReusableDelegationSetCommand";
import { GetReusableDelegationSetLimitCommandInput, GetReusableDelegationSetLimitCommandOutput } from "./commands/GetReusableDelegationSetLimitCommand";
import { GetTrafficPolicyCommandInput, GetTrafficPolicyCommandOutput } from "./commands/GetTrafficPolicyCommand";
import { GetTrafficPolicyInstanceCommandInput, GetTrafficPolicyInstanceCommandOutput } from "./commands/GetTrafficPolicyInstanceCommand";
import { GetTrafficPolicyInstanceCountCommandInput, GetTrafficPolicyInstanceCountCommandOutput } from "./commands/GetTrafficPolicyInstanceCountCommand";
import { ListCidrBlocksCommandInput, ListCidrBlocksCommandOutput } from "./commands/ListCidrBlocksCommand";
import { ListCidrCollectionsCommandInput, ListCidrCollectionsCommandOutput } from "./commands/ListCidrCollectionsCommand";
import { ListCidrLocationsCommandInput, ListCidrLocationsCommandOutput } from "./commands/ListCidrLocationsCommand";
import { ListGeoLocationsCommandInput, ListGeoLocationsCommandOutput } from "./commands/ListGeoLocationsCommand";
import { ListHealthChecksCommandInput, ListHealthChecksCommandOutput } from "./commands/ListHealthChecksCommand";
import { ListHostedZonesByNameCommandInput, ListHostedZonesByNameCommandOutput } from "./commands/ListHostedZonesByNameCommand";
import { ListHostedZonesByVPCCommandInput, ListHostedZonesByVPCCommandOutput } from "./commands/ListHostedZonesByVPCCommand";
import { ListHostedZonesCommandInput, ListHostedZonesCommandOutput } from "./commands/ListHostedZonesCommand";
import { ListQueryLoggingConfigsCommandInput, ListQueryLoggingConfigsCommandOutput } from "./commands/ListQueryLoggingConfigsCommand";
import { ListResourceRecordSetsCommandInput, ListResourceRecordSetsCommandOutput } from "./commands/ListResourceRecordSetsCommand";
import { ListReusableDelegationSetsCommandInput, ListReusableDelegationSetsCommandOutput } from "./commands/ListReusableDelegationSetsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListTagsForResourcesCommandInput, ListTagsForResourcesCommandOutput } from "./commands/ListTagsForResourcesCommand";
import { ListTrafficPoliciesCommandInput, ListTrafficPoliciesCommandOutput } from "./commands/ListTrafficPoliciesCommand";
import { ListTrafficPolicyInstancesByHostedZoneCommandInput, ListTrafficPolicyInstancesByHostedZoneCommandOutput } from "./commands/ListTrafficPolicyInstancesByHostedZoneCommand";
import { ListTrafficPolicyInstancesByPolicyCommandInput, ListTrafficPolicyInstancesByPolicyCommandOutput } from "./commands/ListTrafficPolicyInstancesByPolicyCommand";
import { ListTrafficPolicyInstancesCommandInput, ListTrafficPolicyInstancesCommandOutput } from "./commands/ListTrafficPolicyInstancesCommand";
import { ListTrafficPolicyVersionsCommandInput, ListTrafficPolicyVersionsCommandOutput } from "./commands/ListTrafficPolicyVersionsCommand";
import { ListVPCAssociationAuthorizationsCommandInput, ListVPCAssociationAuthorizationsCommandOutput } from "./commands/ListVPCAssociationAuthorizationsCommand";
import { TestDNSAnswerCommandInput, TestDNSAnswerCommandOutput } from "./commands/TestDNSAnswerCommand";
import { UpdateHealthCheckCommandInput, UpdateHealthCheckCommandOutput } from "./commands/UpdateHealthCheckCommand";
import { UpdateHostedZoneCommentCommandInput, UpdateHostedZoneCommentCommandOutput } from "./commands/UpdateHostedZoneCommentCommand";
import { UpdateTrafficPolicyCommentCommandInput, UpdateTrafficPolicyCommentCommandOutput } from "./commands/UpdateTrafficPolicyCommentCommand";
import { UpdateTrafficPolicyInstanceCommandInput, UpdateTrafficPolicyInstanceCommandOutput } from "./commands/UpdateTrafficPolicyInstanceCommand";
import { Route53Client } from "./Route53Client";

export declare class Route53 extends Route53Client {
    
    activateKeySigningKey(args: ActivateKeySigningKeyCommandInput, options?: __HttpHandlerOptions): Promise<ActivateKeySigningKeyCommandOutput>;
    activateKeySigningKey(args: ActivateKeySigningKeyCommandInput, cb: (err: any, data?: ActivateKeySigningKeyCommandOutput) => void): void;
    activateKeySigningKey(args: ActivateKeySigningKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ActivateKeySigningKeyCommandOutput) => void): void;
    
    associateVPCWithHostedZone(args: AssociateVPCWithHostedZoneCommandInput, options?: __HttpHandlerOptions): Promise<AssociateVPCWithHostedZoneCommandOutput>;
    associateVPCWithHostedZone(args: AssociateVPCWithHostedZoneCommandInput, cb: (err: any, data?: AssociateVPCWithHostedZoneCommandOutput) => void): void;
    associateVPCWithHostedZone(args: AssociateVPCWithHostedZoneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateVPCWithHostedZoneCommandOutput) => void): void;
    
    changeCidrCollection(args: ChangeCidrCollectionCommandInput, options?: __HttpHandlerOptions): Promise<ChangeCidrCollectionCommandOutput>;
    changeCidrCollection(args: ChangeCidrCollectionCommandInput, cb: (err: any, data?: ChangeCidrCollectionCommandOutput) => void): void;
    changeCidrCollection(args: ChangeCidrCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChangeCidrCollectionCommandOutput) => void): void;
    
    changeResourceRecordSets(args: ChangeResourceRecordSetsCommandInput, options?: __HttpHandlerOptions): Promise<ChangeResourceRecordSetsCommandOutput>;
    changeResourceRecordSets(args: ChangeResourceRecordSetsCommandInput, cb: (err: any, data?: ChangeResourceRecordSetsCommandOutput) => void): void;
    changeResourceRecordSets(args: ChangeResourceRecordSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChangeResourceRecordSetsCommandOutput) => void): void;
    
    changeTagsForResource(args: ChangeTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ChangeTagsForResourceCommandOutput>;
    changeTagsForResource(args: ChangeTagsForResourceCommandInput, cb: (err: any, data?: ChangeTagsForResourceCommandOutput) => void): void;
    changeTagsForResource(args: ChangeTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChangeTagsForResourceCommandOutput) => void): void;
    
    createCidrCollection(args: CreateCidrCollectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateCidrCollectionCommandOutput>;
    createCidrCollection(args: CreateCidrCollectionCommandInput, cb: (err: any, data?: CreateCidrCollectionCommandOutput) => void): void;
    createCidrCollection(args: CreateCidrCollectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCidrCollectionCommandOutput) => void): void;
    
    createHealthCheck(args: CreateHealthCheckCommandInput, options?: __HttpHandlerOptions): Promise<CreateHealthCheckCommandOutput>;
    createHealthCheck(args: CreateHealthCheckCommandInput, cb: (err: any, data?: CreateHealthCheckCommandOutput) => void): void;
    createHealthCheck(args: CreateHealthCheckCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHealthCheckCommandOutput) => void): void;
    
    createHostedZone(args: CreateHostedZoneCommandInput, options?: __HttpHandlerOptions): Promise<CreateHostedZoneCommandOutput>;
    createHostedZone(args: CreateHostedZoneCommandInput, cb: (err: any, data?: CreateHostedZoneCommandOutput) => void): void;
    createHostedZone(args: CreateHostedZoneCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHostedZoneCommandOutput) => void): void;
    
    createKeySigningKey(args: CreateKeySigningKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateKeySigningKeyCommandOutput>;
    createKeySigningKey(args: CreateKeySigningKeyCommandInput, cb: (err: any, data?: CreateKeySigningKeyCommandOutput) => void): void;
    createKeySigningKey(args: CreateKeySigningKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateKeySigningKeyCommandOutput) => void): void;
    