import { __assign, __awaiter, __generator, __values } from "tslib";
import { IDENTIFIER_PREFIX_PATTERN } from "./constants";
export function changeResourceRecordSetsMiddleware() {
    var _this = this;
    return function (next) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var ChangeBatch, Changes, _a, _b, change, AliasTarget;
            var e_1, _c;
            return __generator(this, function (_d) {
                ChangeBatch = args.input.ChangeBatch;
                Changes = [];
                try {
                    for (_a = __values(ChangeBatch.Changes), _b = _a.next(); !_b.done; _b = _a.next()) {
                        change = _b.value;
                        AliasTarget = change.ResourceRecordSet.AliasTarget;
                        if (AliasTarget) {
                            Changes.push(__assign(__assign({}, change), { ResourceRecordSet: __assign(__assign({}, change.ResourceRecordSet), { AliasTarget: __assign(__assign({}, AliasTarget), { HostedZoneId: AliasTarget.HostedZoneId.replace(IDENTIFIER_PREFIX_PATTERN, "") }) }) }));
                        }
                        else {
                            Changes.push(change);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [2, next(__assign(__assign({}, args), { input: __assign(__assign({}, args.input), { ChangeBatch: __assign(__assign({}, ChangeBatch), { Changes: Changes }) }) }))];
            });
        }); };
    };
}
export var changeResourceRecordSetsMiddlewareOptions = {
    step: "initialize",
    tags: ["ROUTE53_IDS", "CHANGE_RESOURCE_RECORD_SETS"],
    name: "changeResourceRecordSetsMiddleware",
    override: true,
};
export var getChangeResourceRecordSetsPlugin = function (unused) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(changeResourceRecordSetsMiddleware(), changeResourceRecordSetsMiddlewareOptions);
    },
}); };
